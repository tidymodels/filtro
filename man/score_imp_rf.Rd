% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/score-forest_imp.R
\docType{data}
\name{score_imp_rf}
\alias{score_imp_rf}
\alias{score_imp_rf_conditional}
\alias{score_imp_rf_oblique}
\title{Scoring via random forests}
\format{
An object of class \code{filtro::class_score_imp_rf} (inherits from \code{filtro::class_score}, \code{S7_object}) of length 1.

An object of class \code{filtro::class_score_imp_rf} (inherits from \code{filtro::class_score}, \code{S7_object}) of length 1.

An object of class \code{filtro::class_score_imp_rf} (inherits from \code{filtro::class_score}, \code{S7_object}) of length 1.
}
\usage{
score_imp_rf

score_imp_rf_conditional

score_imp_rf_oblique
}
\arguments{
\item{object}{A score class object based on \code{class_score_imp_rf}.}

\item{formula}{A standard R formula with a single outcome on the right-hand
side and one or more predictors (or \code{.}) on the left-hand side. The data are
processed via \code{\link[stats:model.frame]{stats::model.frame()}}.}

\item{data}{A data frame containing the relevant columns defined by the
formula.}

\item{...}{Further arguments passed to or from other methods.}
}
\description{
These objects are used when either:
\itemize{
\item The predictors are numeric and the outcome is a factor/category, or
\item The predictors are factors and the outcome is numeric.
}

In either case, a random forest, conditional random forest, or oblique random forest
(via \code{\link[ranger:ranger]{ranger::ranger()}}, \code{\link[partykit:cforest]{partykit::cforest()}}, or \code{\link[aorsf:orsf]{aorsf::orsf()}}) is created with
the proper variable roles, and the feature importance scores are computed. Larger
values are associated with more important predictors.

\code{score_imp_rf}, \code{score_imp_rf_conditional} and \code{score_imp_rf_oblique} are
objects that define the technique.
To apply the filter on data, you would use the \code{\link[=fit]{fit()}} method:

\preformatted{
  fit(score_imp_rf, formula, data)
}

See the Examples section below.
}
\details{
The function will determine which columns are predictors and outcomes in the
random forest; no user intervention is required.

Missing values are removed for each predictor/outcome combination being
scored.
When a predictor's importance score is 0, \code{\link[partykit:cforest]{partykit::cforest()}} may omit its
name from the results. In cases like these, a score of 0 is assigned to the
missing predictors.
}
\examples{
if (rlang::is_installed("modeldata")) {

  library(dplyr)

  # Random forests for classification tasks

  cells_subset <- modeldata::cells |>
    dplyr::select(
      class,
      angle_ch_1,
      area_ch_1,
      avg_inten_ch_1,
      avg_inten_ch_2,
      avg_inten_ch_3
    )

  # Random forests
  set.seed(42)
  cells_imp_rf_res <- score_imp_rf |>
    fit(class ~ ., data = cells_subset)
  cells_imp_rf_res@results

  # Conditional random forests
  cells_imp_rf_conditional_res <- score_imp_rf_conditional |>
    fit(class ~ ., data = cells_subset)
  cells_imp_rf_conditional_res@results

  # Oblique random forests
  cells_imp_rf_oblique_res <- score_imp_rf_oblique |>
    fit(class ~ ., data = cells_subset)
  cells_imp_rf_oblique_res@results

  # ----------------------------------------------------------------------------

  # Random forests for regression tasks

  ames_subset <- modeldata::ames |>
    dplyr::select(
      Sale_Price,
      MS_SubClass,
      MS_Zoning,
      Lot_Frontage,
      Lot_Area,
      Street
    )
  ames_subset <- ames_subset |>
    dplyr::mutate(Sale_Price = log10(Sale_Price))

  regression_task <- score_imp_rf
  regression_task@mode <- "regression"

  set.seed(42)
  ames_imp_rf_regression_task_res <-
    regression_task |>
    fit(Sale_Price ~ ., data = ames_subset)
  ames_imp_rf_regression_task_res@results
  # TODO Add example of how to change trees, mtry, min_n, seed
}
}
\keyword{datasets}
