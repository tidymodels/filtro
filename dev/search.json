[{"path":"https://filtro.tidymodels.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Posit Software PBC Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://filtro.tidymodels.org/dev/articles/filtro.html","id":"a-score-class-object","dir":"Articles","previous_headings":"","what":"A score class object","title":"Introduction to filtro","text":"","code":"score_aov_pval #> <filtro::class_score_aov> #>  @ outcome_type  : chr [1:2] \"numeric\" \"factor\" #>  @ predictor_type: chr [1:2] \"numeric\" \"factor\" #>  @ case_weights  : logi TRUE #>  @ range         : num [1:2] 0 Inf #>  @ inclusive     : logi [1:2] FALSE FALSE #>  @ fallback_value: num Inf #>  @ score_type    : chr \"aov_pval\" #>  @ sorts         : function ()   #>  @ direction     : chr \"maximize\" #>  @ deterministic : logi TRUE #>  @ tuning        : logi FALSE #>  @ calculating_fn: function ()   #>  @ label         : chr \"ANOVA p-values\" #>  @ packages      : chr(0)  #>  @ results       :'data.frame':  0 obs. of  0 variables #>  @ neg_log10     : logi TRUE"},{"path":"https://filtro.tidymodels.org/dev/articles/filtro.html","id":"a-scoring-example","dir":"Articles","previous_headings":"","what":"A scoring example","title":"Introduction to filtro","text":"","code":"# ANOVA p-value ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 73 × 4 #>    name      score outcome    predictor    #>    <chr>     <dbl> <chr>      <chr>        #>  1 aov_pval 237.   Sale_Price MS_SubClass  #>  2 aov_pval 130.   Sale_Price MS_Zoning    #>  3 aov_pval  NA    Sale_Price Lot_Frontage #>  4 aov_pval  NA    Sale_Price Lot_Area     #>  5 aov_pval   5.75 Sale_Price Street       #>  6 aov_pval  19.2  Sale_Price Alley        #>  7 aov_pval  71.3  Sale_Price Lot_Shape    #>  8 aov_pval  21.4  Sale_Price Land_Contour #>  9 aov_pval   1.38 Sale_Price Utilities    #> 10 aov_pval  12.0  Sale_Price Lot_Config   #> # ℹ 63 more rows"},{"path":"https://filtro.tidymodels.org/dev/articles/filtro.html","id":"a-filtering-exmple-for-singular-score","dir":"Articles","previous_headings":"","what":"A filtering exmple for singular score","title":"Introduction to filtro","text":"","code":"# Show best score, based on proportion of predictors ames_aov_pval_res |> show_best_score_prop(prop_terms = 0.8) #> # A tibble: 73 × 4 #>    name     score outcome    predictor      #>    <chr>    <dbl> <chr>      <chr>          #>  1 aov_pval  Inf  Sale_Price Neighborhood   #>  2 aov_pval  288. Sale_Price Garage_Finish  #>  3 aov_pval  243. Sale_Price Garage_Type    #>  4 aov_pval  242. Sale_Price Foundation     #>  5 aov_pval  237. Sale_Price MS_SubClass    #>  6 aov_pval  183. Sale_Price Heating_QC     #>  7 aov_pval  173. Sale_Price BsmtFin_Type_1 #>  8 aov_pval  132. Sale_Price Mas_Vnr_Type   #>  9 aov_pval  130. Sale_Price Overall_Cond   #> 10 aov_pval  130. Sale_Price MS_Zoning      #> # ℹ 63 more rows"},{"path":"https://filtro.tidymodels.org/dev/articles/filtro.html","id":"a-filtering-example-for-plural-scores","dir":"Articles","previous_headings":"","what":"A filtering example for plural scores","title":"Introduction to filtro","text":"","code":"# Pearson correlation ames_cor_pearson_res <-   score_cor_pearson |>   fit(Sale_Price ~ ., data = ames_subset) ames_cor_pearson_res@results #> # A tibble: 73 × 4 #>    name         score outcome    predictor    #>    <chr>        <dbl> <chr>      <chr>        #>  1 cor_pearson NA     Sale_Price MS_SubClass  #>  2 cor_pearson NA     Sale_Price MS_Zoning    #>  3 cor_pearson  0.165 Sale_Price Lot_Frontage #>  4 cor_pearson  0.255 Sale_Price Lot_Area     #>  5 cor_pearson NA     Sale_Price Street       #>  6 cor_pearson NA     Sale_Price Alley        #>  7 cor_pearson NA     Sale_Price Lot_Shape    #>  8 cor_pearson NA     Sale_Price Land_Contour #>  9 cor_pearson NA     Sale_Price Utilities    #> 10 cor_pearson NA     Sale_Price Lot_Config   #> # ℹ 63 more rows # Forest importance set.seed(42) ames_imp_rf_reg_res <-   score_imp_rf |>   fit(Sale_Price ~ ., data = ames_subset) ames_imp_rf_reg_res@results #> # A tibble: 73 × 4 #>    name           score outcome    predictor    #>    <chr>          <dbl> <chr>      <chr>        #>  1 imp_rf 0.000471      Sale_Price MS_SubClass  #>  2 imp_rf 0.000447      Sale_Price MS_Zoning    #>  3 imp_rf 0.000229      Sale_Price Lot_Frontage #>  4 imp_rf 0.000678      Sale_Price Lot_Area     #>  5 imp_rf 0.00000172    Sale_Price Street       #>  6 imp_rf 0.00000629    Sale_Price Alley        #>  7 imp_rf 0.0000782     Sale_Price Lot_Shape    #>  8 imp_rf 0.0000452     Sale_Price Land_Contour #>  9 imp_rf 0.00000000527 Sale_Price Utilities    #> 10 imp_rf 0.0000142     Sale_Price Lot_Config   #> # ℹ 63 more rows # Information gain score_info_gain_reg <- score_info_gain score_info_gain_reg@mode <- \"regression\"  ames_info_gain_reg_res <-   score_info_gain_reg |>   fit(Sale_Price ~ ., data = ames_subset) ames_info_gain_reg_res@results #> # A tibble: 73 × 4 #>    name       score outcome    predictor    #>    <chr>      <dbl> <chr>      <chr>        #>  1 infogain 0.266   Sale_Price MS_SubClass  #>  2 infogain 0.113   Sale_Price MS_Zoning    #>  3 infogain 0.146   Sale_Price Lot_Frontage #>  4 infogain 0.140   Sale_Price Lot_Area     #>  5 infogain 0.00365 Sale_Price Street       #>  6 infogain 0.0254  Sale_Price Alley        #>  7 infogain 0.0675  Sale_Price Lot_Shape    #>  8 infogain 0.0212  Sale_Price Land_Contour #>  9 infogain 0.00165 Sale_Price Utilities    #> 10 infogain 0.0133  Sale_Price Lot_Config   #> # ℹ 63 more rows # Create a list class_score_list <- list(   ames_cor_pearson_res,   ames_imp_rf_reg_res,   ames_info_gain_reg_res ) # Fill safe values ames_scores_results <- class_score_list |>   fill_safe_values() |>   # Remove outcome   dplyr::select(-outcome) ames_scores_results #> # A tibble: 73 × 4 #>    predictor    cor_pearson        imp_rf infogain #>    <chr>              <dbl>         <dbl>    <dbl> #>  1 MS_SubClass        1     0.000471       0.266   #>  2 MS_Zoning          1     0.000447       0.113   #>  3 Lot_Frontage       0.165 0.000229       0.146   #>  4 Lot_Area           0.255 0.000678       0.140   #>  5 Street             1     0.00000172     0.00365 #>  6 Alley              1     0.00000629     0.0254  #>  7 Lot_Shape          1     0.0000782      0.0675  #>  8 Land_Contour       1     0.0000452      0.0212  #>  9 Utilities          1     0.00000000527  0.00165 #> 10 Lot_Config         1     0.0000142      0.0133  #> # ℹ 63 more rows # Single and multi-parameter optimization using desirability functions show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1) ) #> # A tibble: 73 × 6 #>    predictor    cor_pearson        imp_rf infogain .d_max_cor_pearson .d_overall #>    <chr>              <dbl>         <dbl>    <dbl>              <dbl>      <dbl> #>  1 MS_SubClass            1 0.000471       0.266                    1          1 #>  2 MS_Zoning              1 0.000447       0.113                    1          1 #>  3 Street                 1 0.00000172     0.00365                  1          1 #>  4 Alley                  1 0.00000629     0.0254                   1          1 #>  5 Lot_Shape              1 0.0000782      0.0675                   1          1 #>  6 Land_Contour           1 0.0000452      0.0212                   1          1 #>  7 Utilities              1 0.00000000527  0.00165                  1          1 #>  8 Lot_Config             1 0.0000142      0.0133                   1          1 #>  9 Land_Slope             1 0.00000301     0.00568                  1          1 #> 10 Neighborhood           1 0.000443       0.462                    1          1 #> # ℹ 63 more rows  show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf) ) #> # A tibble: 73 × 7 #>    predictor      cor_pearson   imp_rf infogain .d_max_cor_pearson .d_max_imp_rf #>    <chr>                <dbl>    <dbl>    <dbl>              <dbl>         <dbl> #>  1 Gr_Liv_Area          0.696 0.00443     0.384              0.696         1     #>  2 Year_Built           0.615 0.00356     0.327              0.615         0.805 #>  3 Total_Bsmt_SF        0.626 0.00248     0.288              0.626         0.562 #>  4 Garage_Type          1     0.00146     0.209              1             0.330 #>  5 First_Flr_SF         0.603 0.00219     0.254              0.603         0.497 #>  6 Garage_Cars          0.675 0.00187     0.327              0.675         0.424 #>  7 Garage_Area          0.651 0.00180     0.316              0.651         0.408 #>  8 Year_Remod_Add       0.586 0.00195     0.237              0.586         0.442 #>  9 Foundation           1     0.000758    0.210              1             0.173 #> 10 Full_Bath            0.577 0.00123     0.243              0.577         0.278 #> # ℹ 63 more rows #> # ℹ 1 more variable: .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf),   maximize(infogain) ) #> # A tibble: 73 × 8 #>    predictor      cor_pearson   imp_rf infogain .d_max_cor_pearson .d_max_imp_rf #>    <chr>                <dbl>    <dbl>    <dbl>              <dbl>         <dbl> #>  1 Gr_Liv_Area          0.696 0.00443     0.384              0.696         1     #>  2 Year_Built           0.615 0.00356     0.327              0.615         0.805 #>  3 Total_Bsmt_SF        0.626 0.00248     0.288              0.626         0.562 #>  4 Garage_Cars          0.675 0.00187     0.327              0.675         0.424 #>  5 Garage_Area          0.651 0.00180     0.316              0.651         0.408 #>  6 First_Flr_SF         0.603 0.00219     0.254              0.603         0.497 #>  7 Garage_Type          1     0.00146     0.209              1             0.330 #>  8 Year_Remod_Add       0.586 0.00195     0.237              0.586         0.442 #>  9 Neighborhood         1     0.000443    0.462              1             0.102 #> 10 Full_Bath            0.577 0.00123     0.243              0.577         0.278 #> # ℹ 63 more rows #> # ℹ 2 more variables: .d_max_infogain <dbl>, .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf),   maximize(infogain),   prop_terms = 0.8 ) #> # A tibble: 58 × 8 #>    predictor      cor_pearson   imp_rf infogain .d_max_cor_pearson .d_max_imp_rf #>    <chr>                <dbl>    <dbl>    <dbl>              <dbl>         <dbl> #>  1 Gr_Liv_Area          0.696 0.00443     0.384              0.696         1     #>  2 Year_Built           0.615 0.00356     0.327              0.615         0.805 #>  3 Total_Bsmt_SF        0.626 0.00248     0.288              0.626         0.562 #>  4 Garage_Cars          0.675 0.00187     0.327              0.675         0.424 #>  5 Garage_Area          0.651 0.00180     0.316              0.651         0.408 #>  6 First_Flr_SF         0.603 0.00219     0.254              0.603         0.497 #>  7 Garage_Type          1     0.00146     0.209              1             0.330 #>  8 Year_Remod_Add       0.586 0.00195     0.237              0.586         0.442 #>  9 Neighborhood         1     0.000443    0.462              1             0.102 #> 10 Full_Bath            0.577 0.00123     0.243              0.577         0.278 #> # ℹ 48 more rows #> # ℹ 2 more variables: .d_max_infogain <dbl>, .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   target(cor_pearson, low = 0.2, target = 0.255, high = 0.9) ) #> # A tibble: 73 × 6 #>    predictor      cor_pearson   imp_rf infogain .d_target_cor_pearson .d_overall #>    <chr>                <dbl>    <dbl>    <dbl>                 <dbl>      <dbl> #>  1 Lot_Area             0.255 0.000678   0.140                  1.000      1.000 #>  2 Second_Flr_SF        0.275 0.00110    0.172                  0.969      0.969 #>  3 Bsmt_Full_Bath       0.275 0.000172   0.0392                 0.969      0.969 #>  4 Latitude             0.286 0.000638   0.267                  0.952      0.952 #>  5 Half_Bath            0.306 0.000285   0.0624                 0.921      0.921 #>  6 Open_Porch_SF        0.320 0.000288   0.148                  0.899      0.899 #>  7 Wood_Deck_SF         0.333 0.000124   0.0954                 0.879      0.879 #>  8 Mas_Vnr_Area         0.443 0.000288   0.105                  0.709      0.709 #>  9 Fireplaces           0.489 0.000925   0.153                  0.637      0.637 #> 10 TotRms_AbvGrd        0.493 0.000520   0.148                  0.632      0.632 #> # ℹ 63 more rows  show_best_desirability_prop(   ames_scores_results,   constrain(cor_pearson, low = 0.2, high = 1) ) #> # A tibble: 73 × 6 #>    predictor    cor_pearson        imp_rf infogain .d_box_cor_pearson .d_overall #>    <chr>              <dbl>         <dbl>    <dbl>              <dbl>      <dbl> #>  1 MS_SubClass        1     0.000471       0.266                    1          1 #>  2 MS_Zoning          1     0.000447       0.113                    1          1 #>  3 Lot_Area           0.255 0.000678       0.140                    1          1 #>  4 Street             1     0.00000172     0.00365                  1          1 #>  5 Alley              1     0.00000629     0.0254                   1          1 #>  6 Lot_Shape          1     0.0000782      0.0675                   1          1 #>  7 Land_Contour       1     0.0000452      0.0212                   1          1 #>  8 Utilities          1     0.00000000527  0.00165                  1          1 #>  9 Lot_Config         1     0.0000142      0.0133                   1          1 #> 10 Land_Slope         1     0.00000301     0.00568                  1          1 #> # ℹ 63 more rows"},{"path":"https://filtro.tidymodels.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Frances Lin. Author, maintainer. Max Kuhn. Author. Emil Hvitfeldt. Author. . Copyright holder, funder.","code":""},{"path":"https://filtro.tidymodels.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lin F, Kuhn M, Hvitfeldt E (2025). filtro: Feature Selection Using Supervised Filter-Based Methods. R package version 0.1.0.9000, https://github.com/tidymodels/filtro.","code":"@Manual{,   title = {filtro: Feature Selection Using Supervised Filter-Based Methods},   author = {Frances Lin and Max Kuhn and Emil Hvitfeldt},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://github.com/tidymodels/filtro}, }"},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"filtro","dir":"","previous_headings":"","what":"Feature Selection Using Supervised Filter-Based Methods","title":"Feature Selection Using Supervised Filter-Based Methods","text":"⚠️ filtro active development; breaking changes may occur.","code":""},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Feature Selection Using Supervised Filter-Based Methods","text":"filtro tidy tools apply filter-based supervised feature selection methods. methods score rank feature relevance using metrics p-values, correlation, importance scores, . package provides functions rank select top proportion number features using built-methods desirability2 package, supports streamlined preprocessing, either standalone within tidymodels workflows recipes package.","code":""},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Feature Selection Using Supervised Filter-Based Methods","text":"Install released version filtro CRAN : Install development version GitHub :","code":"install.packages(\"filtro\") # install.packages(\"pak\") pak::pak(\"tidymodels/filtro\")"},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"feature-selection-methods","dir":"","previous_headings":"","what":"Feature selection methods","title":"Feature Selection Using Supervised Filter-Based Methods","text":"Currently, implemented filters include: ANOVA F-test Correlation Cross tabulation (Chi-squared test Fisher’s exact test) Random forest feature importance Information gain Area ROC curve","code":""},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"a-scoring-example","dir":"","previous_headings":"","what":"A scoring example","title":"Feature Selection Using Supervised Filter-Based Methods","text":"","code":"library(filtro) library(desirability2) library(dplyr) library(modeldata) ames_subset <- modeldata::ames |>   # Use a subset of data   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price)) # ANOVA p-value ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street # Pearson correlation ames_cor_pearson_res <-   score_cor_pearson |>   fit(Sale_Price ~ ., data = ames_subset) ames_cor_pearson_res@results #> # A tibble: 5 × 4 #>   name         score outcome    predictor    #>   <chr>        <dbl> <chr>      <chr>        #> 1 cor_pearson NA     Sale_Price MS_SubClass  #> 2 cor_pearson NA     Sale_Price MS_Zoning    #> 3 cor_pearson  0.165 Sale_Price Lot_Frontage #> 4 cor_pearson  0.255 Sale_Price Lot_Area     #> 5 cor_pearson NA     Sale_Price Street # Forest importance set.seed(42) ames_imp_rf_reg_res <-   score_imp_rf |>   fit(Sale_Price ~ ., data = ames_subset) ames_imp_rf_reg_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 imp_rf 0.0148    Sale_Price MS_SubClass  #> 2 imp_rf 0.00997   Sale_Price MS_Zoning    #> 3 imp_rf 0.00668   Sale_Price Lot_Frontage #> 4 imp_rf 0.0137    Sale_Price Lot_Area     #> 5 imp_rf 0.0000455 Sale_Price Street # Information gain score_info_gain_reg <- score_info_gain score_info_gain_reg@mode <- \"regression\"  ames_info_gain_reg_res <-   score_info_gain_reg |>   fit(Sale_Price ~ ., data = ames_subset) ames_info_gain_reg_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 infogain 0.266   Sale_Price MS_SubClass  #> 2 infogain 0.113   Sale_Price MS_Zoning    #> 3 infogain 0.146   Sale_Price Lot_Frontage #> 4 infogain 0.140   Sale_Price Lot_Area     #> 5 infogain 0.00365 Sale_Price Street"},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"a-filtering-exmple-for-singular-score","dir":"","previous_headings":"","what":"A filtering exmple for singular score","title":"Feature Selection Using Supervised Filter-Based Methods","text":"","code":"ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street # Show best score, based on proportion of predictors ames_aov_pval_res |> show_best_score_prop(prop_terms = 0.2) #> # A tibble: 1 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass # Show best score, based on number of predictors ames_aov_pval_res |> show_best_score_num(num_terms = 2) #> # A tibble: 2 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass #> 2 aov_pval  130. Sale_Price MS_Zoning # Show best score, based on based on cutoff value ames_aov_pval_res |> show_best_score_cutoff(cutoff = 130) #> # A tibble: 1 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass # Show best score, based on number or proportion of predictors with # optional cutoff value  ames_aov_pval_res |> show_best_score_dual(prop_terms = 0.5) #> # A tibble: 2 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass #> 2 aov_pval  130. Sale_Price MS_Zoning ames_aov_pval_res |> show_best_score_dual(prop_terms = 0.5, cutoff = 130) #> # A tibble: 1 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass  ames_aov_pval_res |> show_best_score_dual(num_terms = 2) #> # A tibble: 2 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass #> 2 aov_pval  130. Sale_Price MS_Zoning ames_aov_pval_res |> show_best_score_dual(prop_terms = 2, cutoff = 130) #> # A tibble: 1 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass"},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"a-filtering-example-for-plural-scores","dir":"","previous_headings":"","what":"A filtering example for plural scores","title":"Feature Selection Using Supervised Filter-Based Methods","text":"","code":"# Create a list class_score_list <- list(   ames_aov_pval_res,   ames_cor_pearson_res,   ames_imp_rf_reg_res,   ames_info_gain_reg_res ) # Fill safe values ames_scores_results <- class_score_list |>   fill_safe_values() |>   # Remove outcome   dplyr::select(-outcome) ames_scores_results #> # A tibble: 5 × 5 #>   predictor    aov_pval cor_pearson    imp_rf infogain #>   <chr>           <dbl>       <dbl>     <dbl>    <dbl> #> 1 MS_SubClass    237.         1     0.0148     0.266   #> 2 MS_Zoning      130.         1     0.00997    0.113   #> 3 Lot_Frontage   Inf          0.165 0.00668    0.146   #> 4 Lot_Area       Inf          0.255 0.0137     0.140   #> 5 Street           5.75       1     0.0000455  0.00365 show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1) ) #> # A tibble: 5 × 7 #>   predictor  aov_pval cor_pearson  imp_rf infogain .d_max_cor_pearson .d_overall #>   <chr>         <dbl>       <dbl>   <dbl>    <dbl>              <dbl>      <dbl> #> 1 MS_SubCla…   237.         1     1.48e-2  0.266                1          1     #> 2 MS_Zoning    130.         1     9.97e-3  0.113                1          1     #> 3 Street         5.75       1     4.55e-5  0.00365              1          1     #> 4 Lot_Area     Inf          0.255 1.37e-2  0.140                0.255      0.255 #> 5 Lot_Front…   Inf          0.165 6.68e-3  0.146                0.165      0.165  show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf) ) #> # A tibble: 5 × 8 #>   predictor    aov_pval cor_pearson    imp_rf infogain .d_max_cor_pearson #>   <chr>           <dbl>       <dbl>     <dbl>    <dbl>              <dbl> #> 1 MS_SubClass    237.         1     0.0148     0.266                1     #> 2 MS_Zoning      130.         1     0.00997    0.113                1     #> 3 Lot_Area       Inf          0.255 0.0137     0.140                0.255 #> 4 Lot_Frontage   Inf          0.165 0.00668    0.146                0.165 #> 5 Street           5.75       1     0.0000455  0.00365              1     #> # ℹ 2 more variables: .d_max_imp_rf <dbl>, .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf),   maximize(infogain) ) #> # A tibble: 5 × 9 #>   predictor    aov_pval cor_pearson    imp_rf infogain .d_max_cor_pearson #>   <chr>           <dbl>       <dbl>     <dbl>    <dbl>              <dbl> #> 1 MS_SubClass    237.         1     0.0148     0.266                1     #> 2 MS_Zoning      130.         1     0.00997    0.113                1     #> 3 Lot_Area       Inf          0.255 0.0137     0.140                0.255 #> 4 Lot_Frontage   Inf          0.165 0.00668    0.146                0.165 #> 5 Street           5.75       1     0.0000455  0.00365              1     #> # ℹ 3 more variables: .d_max_imp_rf <dbl>, .d_max_infogain <dbl>, #> #   .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf),   maximize(infogain),   prop_terms = 0.2 ) #> # A tibble: 1 × 9 #>   predictor   aov_pval cor_pearson imp_rf infogain .d_max_cor_pearson #>   <chr>          <dbl>       <dbl>  <dbl>    <dbl>              <dbl> #> 1 MS_SubClass     237.           1 0.0148    0.266                  1 #> # ℹ 3 more variables: .d_max_imp_rf <dbl>, .d_max_infogain <dbl>, #> #   .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   target(cor_pearson, low = 0.2, target = 0.255, high = 0.9) ) #> # A tibble: 5 × 7 #>   predictor    aov_pval cor_pearson    imp_rf infogain .d_target_cor_pearson #>   <chr>           <dbl>       <dbl>     <dbl>    <dbl>                 <dbl> #> 1 Lot_Area       Inf          0.255 0.0137     0.140                    1.00 #> 2 MS_SubClass    237.         1     0.0148     0.266                    0    #> 3 MS_Zoning      130.         1     0.00997    0.113                    0    #> 4 Lot_Frontage   Inf          0.165 0.00668    0.146                    0    #> 5 Street           5.75       1     0.0000455  0.00365                  0    #> # ℹ 1 more variable: .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   constrain(cor_pearson, low = 0.2, high = 1) ) #> # A tibble: 5 × 7 #>   predictor  aov_pval cor_pearson  imp_rf infogain .d_box_cor_pearson .d_overall #>   <chr>         <dbl>       <dbl>   <dbl>    <dbl>              <dbl>      <dbl> #> 1 MS_SubCla…   237.         1     1.48e-2  0.266                    1          1 #> 2 MS_Zoning    130.         1     9.97e-3  0.113                    1          1 #> 3 Lot_Area     Inf          0.255 1.37e-2  0.140                    1          1 #> 4 Street         5.75       1     4.55e-5  0.00365                  1          1 #> 5 Lot_Front…   Inf          0.165 6.68e-3  0.146                    0          0"},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Feature Selection Using Supervised Filter-Based Methods","text":"Please note filtro project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions tidymodels packages, modeling, machine learning, please post Posit Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/ames_scores_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Ames exampled score results — ames_scores_results","title":"Ames exampled score results — ames_scores_results","text":"Ames exampled score results","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/ames_scores_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ames exampled score results — ames_scores_results","text":"tibble","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/ames_scores_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ames exampled score results — ames_scores_results","text":"","code":"data(ames_scores_results)"},{"path":"https://filtro.tidymodels.org/dev/reference/arrange_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange score — arrange_score","title":"Arrange score — arrange_score","text":"Arrange score","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/arrange_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange score — arrange_score","text":"x score class object, .e., score_*. ... arguments passed methods. target numeric value specifying target value. default NULL indicates target value.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/arrange_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange score — arrange_score","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street        # Arrange score ames_aov_pval_res |> arrange_score() #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval   5.75 Sale_Price Street       #> 4 aov_pval  NA    Sale_Price Lot_Frontage #> 5 aov_pval  NA    Sale_Price Lot_Area"},{"path":"https://filtro.tidymodels.org/dev/reference/bind_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind score class object, including their associated metadata and scores — bind_scores","title":"Bind score class object, including their associated metadata and scores — bind_scores","text":"Binds multiple score class objects (e.g., score_*), including associated metadata scores. See fill_safe_values() binding safe-value handling.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/bind_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind score class object, including their associated metadata and scores — bind_scores","text":"x list. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/bind_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind score class object, including their associated metadata and scores — bind_scores","text":"","code":"library(dplyr)  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  # ANOVA p-value ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street        # Pearson correlation ames_cor_pearson_res <-   score_cor_pearson |>   fit(Sale_Price ~ ., data = ames_subset) ames_cor_pearson_res@results #> # A tibble: 5 × 4 #>   name         score outcome    predictor    #>   <chr>        <dbl> <chr>      <chr>        #> 1 cor_pearson NA     Sale_Price MS_SubClass  #> 2 cor_pearson NA     Sale_Price MS_Zoning    #> 3 cor_pearson  0.165 Sale_Price Lot_Frontage #> 4 cor_pearson  0.255 Sale_Price Lot_Area     #> 5 cor_pearson NA     Sale_Price Street        # Forest importance set.seed(42) ames_imp_rf_reg_res <-   score_imp_rf |>   fit(Sale_Price ~ ., data = ames_subset) ames_imp_rf_reg_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 imp_rf 0.0147    Sale_Price MS_SubClass  #> 2 imp_rf 0.0105    Sale_Price MS_Zoning    #> 3 imp_rf 0.00691   Sale_Price Lot_Frontage #> 4 imp_rf 0.0142    Sale_Price Lot_Area     #> 5 imp_rf 0.0000347 Sale_Price Street        # Information gain score_info_gain_reg <- score_info_gain score_info_gain_reg@mode <- \"regression\"  ames_info_gain_reg_res <-   score_info_gain_reg |>   fit(Sale_Price ~ ., data = ames_subset) ames_info_gain_reg_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 infogain 0.266   Sale_Price MS_SubClass  #> 2 infogain 0.113   Sale_Price MS_Zoning    #> 3 infogain 0.146   Sale_Price Lot_Frontage #> 4 infogain 0.140   Sale_Price Lot_Area     #> 5 infogain 0.00365 Sale_Price Street        # Create a list class_score_list <- list(   ames_aov_pval_res,   ames_cor_pearson_res,   ames_imp_rf_reg_res,   ames_info_gain_reg_res )  # Bind scores class_score_list |> bind_scores() #> # A tibble: 5 × 6 #>   outcome    predictor    aov_pval cor_pearson    imp_rf infogain #>   <chr>      <chr>           <dbl>       <dbl>     <dbl>    <dbl> #> 1 Sale_Price MS_SubClass    237.        NA     0.0147     0.266   #> 2 Sale_Price MS_Zoning      130.        NA     0.0105     0.113   #> 3 Sale_Price Lot_Frontage    NA          0.165 0.00691    0.146   #> 4 Sale_Price Lot_Area        NA          0.255 0.0142     0.140   #> 5 Sale_Price Street           5.75      NA     0.0000347  0.00365"},{"path":"https://filtro.tidymodels.org/dev/reference/class_score.html","id":null,"dir":"Reference","previous_headings":"","what":"General S7 classes for scoring objects — class_score","title":"General S7 classes for scoring objects — class_score","text":"class_score S7 object contains slots characteristics predictor importance scores. specific classes individual methods based object (shown ).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/class_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General S7 classes for scoring objects — class_score","text":"","code":"class_score(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame() )  class_score_aov(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame(),   neg_log10 = TRUE )  class_score_cor(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame() )  class_score_xtab(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame(),   neg_log10 = TRUE,   fdr = FALSE )  class_score_imp_rf(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame(),   engine = \"ranger\" )  class_score_info_gain(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame(),   mode = \"classification\" )  class_score_roc_auc(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame() )"},{"path":"https://filtro.tidymodels.org/dev/reference/dont_log_pvalues.html","id":null,"dir":"Reference","previous_headings":"","what":"Disable -log10 Transformation of P-values — dont_log_pvalues","title":"Disable -log10 Transformation of P-values — dont_log_pvalues","text":"Disable -log10 Transformation P-values","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/dont_log_pvalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disable -log10 Transformation of P-values — dont_log_pvalues","text":"","code":"dont_log_pvalues(x)"},{"path":"https://filtro.tidymodels.org/dev/reference/dont_log_pvalues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disable -log10 Transformation of P-values — dont_log_pvalues","text":"x score class object.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/dont_log_pvalues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disable -log10 Transformation of P-values — dont_log_pvalues","text":"modified score class object neg_log10 set FALSE.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill safe value (singular) — fill_safe_value","title":"Fill safe value (singular) — fill_safe_value","text":"Fills safe value missing score. singular scoring method. See fill_safe_values() plural scoring method.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill safe value (singular) — fill_safe_value","text":"x score class object, .e., score_*. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill safe value (singular) — fill_safe_value","text":"","code":"library(dplyr)  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street        # Fill safe value ames_aov_pval_res |> fill_safe_value() #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval Inf    Sale_Price Lot_Frontage #> 4 aov_pval Inf    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street"},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill safe values (plural) — fill_safe_values","title":"Fill safe values (plural) — fill_safe_values","text":"Wraps bind_scores(), fills safe values missing scores. plural scoring method. See fill_safe_value() singular scoring method.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill safe values (plural) — fill_safe_values","text":"x list. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill safe values (plural) — fill_safe_values","text":"","code":"library(dplyr)  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  # ANOVA p-value ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street        # Pearson correlation ames_cor_pearson_res <-   score_cor_pearson |>   fit(Sale_Price ~ ., data = ames_subset) ames_cor_pearson_res@results #> # A tibble: 5 × 4 #>   name         score outcome    predictor    #>   <chr>        <dbl> <chr>      <chr>        #> 1 cor_pearson NA     Sale_Price MS_SubClass  #> 2 cor_pearson NA     Sale_Price MS_Zoning    #> 3 cor_pearson  0.165 Sale_Price Lot_Frontage #> 4 cor_pearson  0.255 Sale_Price Lot_Area     #> 5 cor_pearson NA     Sale_Price Street        # Forest importance set.seed(42) ames_imp_rf_reg_res <-   score_imp_rf |>   fit(Sale_Price ~ ., data = ames_subset) ames_imp_rf_reg_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 imp_rf 0.0147    Sale_Price MS_SubClass  #> 2 imp_rf 0.0105    Sale_Price MS_Zoning    #> 3 imp_rf 0.00691   Sale_Price Lot_Frontage #> 4 imp_rf 0.0142    Sale_Price Lot_Area     #> 5 imp_rf 0.0000347 Sale_Price Street        # Information gain score_info_gain_reg <- score_info_gain score_info_gain_reg@mode <- \"regression\"  ames_info_gain_reg_res <-   score_info_gain_reg |>   fit(Sale_Price ~ ., data = ames_subset) ames_info_gain_reg_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 infogain 0.266   Sale_Price MS_SubClass  #> 2 infogain 0.113   Sale_Price MS_Zoning    #> 3 infogain 0.146   Sale_Price Lot_Frontage #> 4 infogain 0.140   Sale_Price Lot_Area     #> 5 infogain 0.00365 Sale_Price Street        # Create a list class_score_list <- list(   ames_aov_pval_res,   ames_cor_pearson_res,   ames_imp_rf_reg_res,   ames_info_gain_reg_res )  # Fill safe values class_score_list |> fill_safe_values() #> # A tibble: 5 × 6 #>   outcome    predictor    aov_pval cor_pearson    imp_rf infogain #>   <chr>      <chr>           <dbl>       <dbl>     <dbl>    <dbl> #> 1 Sale_Price MS_SubClass    237.         1     0.0147     0.266   #> 2 Sale_Price MS_Zoning      130.         1     0.0105     0.113   #> 3 Sale_Price Lot_Frontage   Inf          0.165 0.00691    0.146   #> 4 Sale_Price Lot_Area       Inf          0.255 0.0142     0.140   #> 5 Sale_Price Street           5.75       1     0.0000347  0.00365"},{"path":"https://filtro.tidymodels.org/dev/reference/filtro-package.html","id":null,"dir":"Reference","previous_headings":"","what":"filtro: Feature Selection Using Supervised Filter-Based Methods — filtro-package","title":"filtro: Feature Selection Using Supervised Filter-Based Methods — filtro-package","text":"Tidy tools apply filter-based supervised feature selection methods. methods score rank feature relevance using metrics p-values, correlation, importance scores (Kuhn Johnson (2019) doi:10.1201/9781315108230 ).","code":""},{"path":[]},{"path":"https://filtro.tidymodels.org/dev/reference/filtro-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"filtro: Feature Selection Using Supervised Filter-Based Methods — filtro-package","text":"Maintainer: Frances Lin franceslinyc@gmail.com Authors: Max Kuhn max@posit.co (ORCID) Emil Hvitfeldt emil.hvitfeldt@posit.co contributors: Posit Software, PBC (03wc8by49) [copyright holder, funder]","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_dense.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank score based on dplyr::dense_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_dense","title":"Rank score based on dplyr::dense_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_dense","text":"Rank score based dplyr::dense_rank(), tied values receive rank ranks gaps (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_dense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank score based on dplyr::dense_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_dense","text":"","code":"rank_best_score_dense(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_dense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank score based on dplyr::dense_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_dense","text":"x score class object, .e., score_*. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank score based on dplyr::min_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_min","title":"Rank score based on dplyr::min_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_min","text":"Rank score based dplyr::min_rank(), tied values receive rank ranks gaps (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank score based on dplyr::min_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_min","text":"","code":"rank_best_score_min(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank score based on dplyr::min_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_min","text":"x score class object, .e., score_*. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via analysis of variance hypothesis tests — score_aov_pval","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"two objects can used compute importance scores based Analysis Variance techniques.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"","code":"score_aov_pval  score_aov_fstat"},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"object class filtro::class_score_aov (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_aov (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"S7 object. primary property interest results. data frame results populated fit() method columns: name: name score (e.g., aov_fstat aov_pval). score: estimates predictor. outcome: name outcome column. predictor: names predictor inputs. data accessed using object@results (see examples ).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"objects used either: predictors numeric outcome factor/category, predictors factors outcome numeric. either case, linear model (via stats::lm()) created proper variable roles, overall p-value hypothesis means equal computed via standard F-statistic. p-value returned transformed -log10(p_value) larger values associated important predictors. Missing values removed predictor/outcome combination scored. cases underlying computations fail, scoring proceeds silently, missing value given score.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"estimating-the-scores","dir":"Reference","previous_headings":"","what":"Estimating the scores","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"filtro, score_* objects define scoring method (e.g., data input requirements, package dependencies, etc). compute scores specific data set, fit() method used. main arguments functions : object score class object based (e.g., score_aov_pval). formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame() data data frame containing relevant columns defined formula. ... arguments passed methods. case_weights quantitative vector case weights length number rows data. default NULL indicates case weights.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"","code":"# Analysis of variance where `class` is the class predictor and the numeric # predictors are the outcomes/responses  cell_data <- modeldata::cells cell_data$case <- NULL  # ANOVA p-value cell_p_val_res <-   score_aov_pval |>   fit(class ~ ., data = cell_data) cell_p_val_res@results #> # A tibble: 56 × 4 #>    name       score outcome predictor                    #>    <chr>      <dbl> <chr>   <chr>                        #>  1 aov_pval  0.0575 class   angle_ch_1                   #>  2 aov_pval  1.04   class   area_ch_1                    #>  3 aov_pval 73.2    class   avg_inten_ch_1               #>  4 aov_pval 88.5    class   avg_inten_ch_2               #>  5 aov_pval  0.0246 class   avg_inten_ch_3               #>  6 aov_pval 27.8    class   avg_inten_ch_4               #>  7 aov_pval 52.6    class   convex_hull_area_ratio_ch_1  #>  8 aov_pval 60.0    class   convex_hull_perim_ratio_ch_1 #>  9 aov_pval 50.7    class   diff_inten_density_ch_1      #> 10 aov_pval  1.51   class   diff_inten_density_ch_3      #> # ℹ 46 more rows  # ANOVA raw p-value natrual_units <- score_aov_pval |> dont_log_pvalues() cell_pval_natrual_res <-   natrual_units |>   fit(class ~ ., data = cell_data) cell_pval_natrual_res@results #> # A tibble: 56 × 4 #>    name        score outcome predictor                    #>    <chr>       <dbl> <chr>   <chr>                        #>  1 aov_pval 8.76e- 1 class   angle_ch_1                   #>  2 aov_pval 9.05e- 2 class   area_ch_1                    #>  3 aov_pval 6.02e-74 class   avg_inten_ch_1               #>  4 aov_pval 3.02e-89 class   avg_inten_ch_2               #>  5 aov_pval 9.45e- 1 class   avg_inten_ch_3               #>  6 aov_pval 1.47e-28 class   avg_inten_ch_4               #>  7 aov_pval 2.63e-53 class   convex_hull_area_ratio_ch_1  #>  8 aov_pval 1.08e-60 class   convex_hull_perim_ratio_ch_1 #>  9 aov_pval 1.90e-51 class   diff_inten_density_ch_1      #> 10 aov_pval 3.07e- 2 class   diff_inten_density_ch_3      #> # ℹ 46 more rows  # ANOVA t/F-statistic cell_t_stat_res <-   score_aov_fstat |>   fit(class ~ ., data = cell_data) cell_t_stat_res@results #> # A tibble: 56 × 4 #>    name          score outcome predictor                    #>    <chr>         <dbl> <chr>   <chr>                        #>  1 aov_fstat   0.0244  class   angle_ch_1                   #>  2 aov_fstat   2.87    class   area_ch_1                    #>  3 aov_fstat 360.      class   avg_inten_ch_1               #>  4 aov_fstat 444.      class   avg_inten_ch_2               #>  5 aov_fstat   0.00477 class   avg_inten_ch_3               #>  6 aov_fstat 127.      class   avg_inten_ch_4               #>  7 aov_fstat 251.      class   convex_hull_area_ratio_ch_1  #>  8 aov_fstat 289.      class   convex_hull_perim_ratio_ch_1 #>  9 aov_fstat 241.      class   diff_inten_density_ch_1      #> 10 aov_fstat   4.68    class   diff_inten_density_ch_3      #> # ℹ 46 more rows  # --------------------------------------------------------------------------- library(dplyr)  # Analysis of variance where `chem_fp_*` are the class predictors and # `permeability` is the numeric outcome/response  permeability <-   modeldata::permeability_qsar |>   # Make the problem a little smaller for time; use 50 predictors   select(1:51) |>   # Make the binary predictor columns into factors   mutate(across(starts_with(\"chem_fp\"), as.factor))  perm_p_val_res <-   score_aov_pval |>   fit(permeability ~ ., data = permeability) perm_p_val_res@results #> # A tibble: 50 × 4 #>    name      score outcome      predictor    #>    <chr>     <dbl> <chr>        <chr>        #>  1 aov_pval  1.88  permeability chem_fp_0001 #>  2 aov_pval  1.63  permeability chem_fp_0002 #>  3 aov_pval  1.36  permeability chem_fp_0003 #>  4 aov_pval  1.36  permeability chem_fp_0004 #>  5 aov_pval  1.36  permeability chem_fp_0005 #>  6 aov_pval 10.6   permeability chem_fp_0006 #>  7 aov_pval NA     permeability chem_fp_0007 #>  8 aov_pval NA     permeability chem_fp_0008 #>  9 aov_pval  0.265 permeability chem_fp_0009 #> 10 aov_pval  0.341 permeability chem_fp_0010 #> # ℹ 40 more rows  # Note that some `lm()` calls failed and are given NA score values. For # example: table(permeability$chem_fp_0007) #>  #>   1  #> 165   perm_t_stat_res <-   score_aov_fstat |>   fit(permeability ~ ., data = permeability) perm_t_stat_res@results #> # A tibble: 50 × 4 #>    name       score outcome      predictor    #>    <chr>      <dbl> <chr>        <chr>        #>  1 aov_fstat  6.28  permeability chem_fp_0001 #>  2 aov_fstat  5.22  permeability chem_fp_0002 #>  3 aov_fstat  4.13  permeability chem_fp_0003 #>  4 aov_fstat  4.13  permeability chem_fp_0004 #>  5 aov_fstat  4.13  permeability chem_fp_0005 #>  6 aov_fstat 51.3   permeability chem_fp_0006 #>  7 aov_fstat NA     permeability chem_fp_0007 #>  8 aov_fstat NA     permeability chem_fp_0008 #>  9 aov_fstat  0.371 permeability chem_fp_0009 #> 10 aov_fstat  0.559 permeability chem_fp_0010 #> # ℹ 40 more rows"},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via correlation coefficient — score_cor_pearson","title":"Scoring via correlation coefficient — score_cor_pearson","text":"two objects can used compute importance scores based correlation coefficient.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via correlation coefficient — score_cor_pearson","text":"","code":"score_cor_pearson  score_cor_spearman"},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via correlation coefficient — score_cor_pearson","text":"object class filtro::class_score_cor (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_cor (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring via correlation coefficient — score_cor_pearson","text":"S7 object. primary property interest results. data frame results populated fit() method columns: name: name score (e.g., score_cor_pearson score_cor_spearman). score: estimates predictor. outcome: name outcome column. predictor: names predictor inputs. data accessed using object@results (see examples ).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via correlation coefficient — score_cor_pearson","text":"objects used : predictors numeric outcome numeric. case, correlation coefficient (via stats::cov.wt()) computed proper variable roles. Values closer 1 -1 (.e., abs(cor_pearson) closer 1) associated important predictors. Missing values removed predictor/outcome combination scored. cases underlying computations fail, scoring proceeds silently, missing value given score.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"estimating-the-scores","dir":"Reference","previous_headings":"","what":"Estimating the scores","title":"Scoring via correlation coefficient — score_cor_pearson","text":"filtro, score_* objects define scoring method (e.g., data input requirements, package dependencies, etc). compute scores specific data set, fit() method used. main arguments functions : object score class object based (e.g., score_cor_pearson). formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame() data data frame containing relevant columns defined formula. ... arguments passed methods. case_weights quantitative vector case weights length number rows data. default NULL indicates case weights.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via correlation coefficient — score_cor_pearson","text":"","code":"library(dplyr)  ames <- modeldata::ames  # Pearson correlation ames_cor_pearson_res <-   score_cor_pearson |>   fit(Sale_Price ~ ., data = ames) ames_cor_pearson_res@results #> # A tibble: 73 × 4 #>    name         score outcome    predictor    #>    <chr>        <dbl> <chr>      <chr>        #>  1 cor_pearson NA     Sale_Price MS_SubClass  #>  2 cor_pearson NA     Sale_Price MS_Zoning    #>  3 cor_pearson  0.202 Sale_Price Lot_Frontage #>  4 cor_pearson  0.267 Sale_Price Lot_Area     #>  5 cor_pearson NA     Sale_Price Street       #>  6 cor_pearson NA     Sale_Price Alley        #>  7 cor_pearson NA     Sale_Price Lot_Shape    #>  8 cor_pearson NA     Sale_Price Land_Contour #>  9 cor_pearson NA     Sale_Price Utilities    #> 10 cor_pearson NA     Sale_Price Lot_Config   #> # ℹ 63 more rows  # Spearman correlation ames_cor_spearman_res <-   score_cor_spearman |>   fit(Sale_Price ~ ., data = ames) ames_cor_spearman_res@results #> # A tibble: 73 × 4 #>    name          score outcome    predictor    #>    <chr>         <dbl> <chr>      <chr>        #>  1 cor_spearman NA     Sale_Price MS_SubClass  #>  2 cor_spearman NA     Sale_Price MS_Zoning    #>  3 cor_spearman  0.228 Sale_Price Lot_Frontage #>  4 cor_spearman  0.429 Sale_Price Lot_Area     #>  5 cor_spearman NA     Sale_Price Street       #>  6 cor_spearman NA     Sale_Price Alley        #>  7 cor_spearman NA     Sale_Price Lot_Shape    #>  8 cor_spearman NA     Sale_Price Land_Contour #>  9 cor_spearman NA     Sale_Price Utilities    #> 10 cor_spearman NA     Sale_Price Lot_Config   #> # ℹ 63 more rows"},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via random forests — score_imp_rf","title":"Scoring via random forests — score_imp_rf","text":"Three different random forest models can used measure predictor importance.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via random forests — score_imp_rf","text":"","code":"score_imp_rf  score_imp_rf_conditional  score_imp_rf_oblique"},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via random forests — score_imp_rf","text":"object class filtro::class_score_imp_rf (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_imp_rf (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_imp_rf (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring via random forests — score_imp_rf","text":"S7 object. primary property interest results. data frame results populated fit() method columns: name: name score (e.g., imp_rf). score: estimates predictor. outcome: name outcome column. predictor: names predictor inputs. data accessed using object@results (see examples ).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via random forests — score_imp_rf","text":"objects used either: predictors numeric outcome factor/category, predictors factors outcome numeric. either case, random forest, conditional random forest, oblique random forest (via ranger::ranger(), partykit::cforest(), aorsf::orsf()) created proper variable roles, feature importance scores computed. Larger values associated important predictors. predictor's importance score 0, partykit::cforest() may omit name results. cases like , score 0 assigned missing predictors. cases underlying computations fail, scoring proceeds silently, missing value given score.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"estimating-the-scores","dir":"Reference","previous_headings":"","what":"Estimating the scores","title":"Scoring via random forests — score_imp_rf","text":"filtro, score_* objects define scoring method (e.g., data input requirements, package dependencies, etc). compute scores specific data set, fit() method used. main arguments functions : object score class object based (e.g., score_imp_rf). formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame() data data frame containing relevant columns defined formula. ... arguments passed methods. case_weights quantitative vector case weights length number rows data. default NULL indicates case weights. Missing values removed case-wise deletion.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via random forests — score_imp_rf","text":"","code":"library(dplyr)  # Random forests for classification task  cells_subset <- modeldata::cells |>   # Use a small example for efficiency   dplyr::select(     class,     angle_ch_1,     area_ch_1,     avg_inten_ch_1,     avg_inten_ch_2,     avg_inten_ch_3   ) |>   slice(1:50)  # Random forest set.seed(42) cells_imp_rf_res <- score_imp_rf |>   fit(class ~ ., data = cells_subset) cells_imp_rf_res@results #> # A tibble: 5 × 4 #>   name       score outcome predictor      #>   <chr>      <dbl> <chr>   <chr>          #> 1 imp_rf -0.00283  class   angle_ch_1     #> 2 imp_rf -0.00472  class   area_ch_1      #> 3 imp_rf  0.0419   class   avg_inten_ch_1 #> 4 imp_rf  0.0604   class   avg_inten_ch_2 #> 5 imp_rf  0.000662 class   avg_inten_ch_3  # Conditional random forest cells_imp_rf_conditional_res <- score_imp_rf_conditional |>   fit(class ~ ., data = cells_subset, trees = 10) cells_imp_rf_conditional_res@results #> # A tibble: 5 × 4 #>   name                  score outcome predictor      #>   <chr>                 <dbl> <chr>   <chr>          #> 1 imp_rf_conditional -0.00889 class   angle_ch_1     #> 2 imp_rf_conditional  0.0377  class   area_ch_1      #> 3 imp_rf_conditional  0.199   class   avg_inten_ch_1 #> 4 imp_rf_conditional  0.616   class   avg_inten_ch_2 #> 5 imp_rf_conditional  0       class   avg_inten_ch_3  # Oblique random forest cells_imp_rf_oblique_res <- score_imp_rf_oblique |>   fit(class ~ ., data = cells_subset) cells_imp_rf_oblique_res@results #> # A tibble: 5 × 4 #>   name              score outcome predictor      #>   <chr>             <dbl> <chr>   <chr>          #> 1 imp_rf_oblique -0.0102  class   angle_ch_1     #> 2 imp_rf_oblique  0.00764 class   area_ch_1      #> 3 imp_rf_oblique  0.0901  class   avg_inten_ch_1 #> 4 imp_rf_oblique  0.0759  class   avg_inten_ch_2 #> 5 imp_rf_oblique -0.00673 class   avg_inten_ch_3  # ----------------------------------------------------------------------------  # Random forests for regression task  ames_subset <- modeldata::ames |>   # Use a small example for efficiency   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) |>   slice(1:50) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  set.seed(42) ames_imp_rf_regression_task_res <-   score_imp_rf |>   fit(Sale_Price ~ ., data = ames_subset) ames_imp_rf_regression_task_res@results #> # A tibble: 5 × 4 #>   name     score outcome    predictor    #>   <chr>    <dbl> <chr>      <chr>        #> 1 imp_rf 0.00246 Sale_Price MS_SubClass  #> 2 imp_rf 0.00233 Sale_Price MS_Zoning    #> 3 imp_rf 0.0115  Sale_Price Lot_Frontage #> 4 imp_rf 0.00839 Sale_Price Lot_Area     #> 5 imp_rf 0       Sale_Price Street"},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via entropy-based filters — score_info_gain","title":"Scoring via entropy-based filters — score_info_gain","text":"Three different information theory (entropy) scores can computed.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via entropy-based filters — score_info_gain","text":"","code":"score_info_gain  score_gain_ratio  score_sym_uncert"},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via entropy-based filters — score_info_gain","text":"object class filtro::class_score_info_gain (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_info_gain (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_info_gain (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring via entropy-based filters — score_info_gain","text":"S7 object. primary property interest results. data frame results populated fit() method columns: name: name score (e.g., info_gain). score: estimates predictor. outcome: name outcome column. predictor: names predictor inputs. data accessed using object@results (see examples ).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via entropy-based filters — score_info_gain","text":"objects used either: predictors numeric outcome factor/category, predictors factors outcome numeric. either case, entropy-based filter (via FSelectorRcpp::information_gain()) applied proper variable roles. Depending chosen method, information gain, gain ratio, symmetrical uncertainty computed. Larger values associated important predictors. Missing values removed predictor/outcome combination scored. cases underlying computations fail, scoring proceeds silently, missing value given score.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"estimating-the-scores","dir":"Reference","previous_headings":"","what":"Estimating the scores","title":"Scoring via entropy-based filters — score_info_gain","text":"filtro, score_* objects define scoring method (e.g., data input requirements, package dependencies, etc). compute scores specific data set, fit() method used. main arguments functions : object score class object based (e.g., score_info_gain). formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame() data data frame containing relevant columns defined formula. ... arguments passed methods. case_weights quantitative vector case weights length number rows data. default NULL indicates case weights.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via entropy-based filters — score_info_gain","text":"","code":"library(dplyr)  # Entropy-based filter for classification tasks  cells_subset <- modeldata::cells |>   dplyr::select(     class,     angle_ch_1,     area_ch_1,     avg_inten_ch_1,     avg_inten_ch_2,     avg_inten_ch_3   )  # Information gain cells_info_gain_res <- score_info_gain |>   fit(class ~ ., data = cells_subset) cells_info_gain_res@results #> # A tibble: 5 × 4 #>   name      score outcome predictor      #>   <chr>     <dbl> <chr>   <chr>          #> 1 infogain 0      class   angle_ch_1     #> 2 infogain 0.0144 class   area_ch_1      #> 3 infogain 0.109  class   avg_inten_ch_1 #> 4 infogain 0.137  class   avg_inten_ch_2 #> 5 infogain 0      class   avg_inten_ch_3  # Gain ratio cells_gain_ratio_res <- score_gain_ratio |>   fit(class ~ ., data = cells_subset) cells_gain_ratio_res@results #> # A tibble: 5 × 4 #>   name       score outcome predictor      #>   <chr>      <dbl> <chr>   <chr>          #> 1 gainratio 0      class   angle_ch_1     #> 2 gainratio 0.0266 class   area_ch_1      #> 3 gainratio 0.0828 class   avg_inten_ch_1 #> 4 gainratio 0.106  class   avg_inten_ch_2 #> 5 gainratio 0      class   avg_inten_ch_3  # Symmetrical uncertainty cells_sym_uncert_res <- score_sym_uncert |>   fit(class ~ ., data = cells_subset) cells_sym_uncert_res@results #> # A tibble: 5 × 4 #>   name       score outcome predictor      #>   <chr>      <dbl> <chr>   <chr>          #> 1 symuncert 0      class   angle_ch_1     #> 2 symuncert 0.0242 class   area_ch_1      #> 3 symuncert 0.111  class   avg_inten_ch_1 #> 4 symuncert 0.141  class   avg_inten_ch_2 #> 5 symuncert 0      class   avg_inten_ch_3  # ----------------------------------------------------------------------------  # Entropy-based filter for regression tasks  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  regression_task <- score_info_gain regression_task@mode <- \"regression\"  ames_info_gain_regression_task_res <-   regression_task |>   fit(Sale_Price ~ ., data = ames_subset) ames_info_gain_regression_task_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 infogain 0.266   Sale_Price MS_SubClass  #> 2 infogain 0.113   Sale_Price MS_Zoning    #> 3 infogain 0.146   Sale_Price Lot_Frontage #> 4 infogain 0.140   Sale_Price Lot_Area     #> 5 infogain 0.00365 Sale_Price Street"},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"area ROC curves can used measure predictor importance.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"","code":"score_roc_auc"},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"object class filtro::class_score_roc_auc (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"S7 object. primary property interest results. data frame results populated fit() method columns: name: name score (e.g., roc_auc). score: estimates predictor. outcome: name outcome column. predictor: names predictor inputs. data accessed using object@results (see examples ).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"objects used either: predictors numeric outcome factor/category, predictors factors outcome numeric. either case, ROC curve (via pROC::roc() pROC::multiclass.roc()) created proper variable roles, area ROC curve computed (via pROC::auc()). Values higher 0.5 (.e., max(roc_auc, 1 - roc_auc) > 0.5) associated important predictors. Missing values removed predictor/outcome combination scored. cases underlying computations fail, scoring proceeds silently, missing value given score.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"estimating-the-scores","dir":"Reference","previous_headings":"","what":"Estimating the scores","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"filtro, score_* objects define scoring method (e.g., data input requirements, package dependencies, etc). compute scores specific data set, fit() method used. main arguments functions : object score class object based (e.g., score_cor_pearson). formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame() data data frame containing relevant columns defined formula. ... arguments passed methods. case_weights quantitative vector case weights length number rows data. default NULL indicates case weights. NOTE case weights used multiclass ROC computed.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"","code":"library(dplyr)  # ROC AUC where the numeric predictors are the predictors and # `class` is the class outcome/response  cells_subset <- modeldata::cells |>   dplyr::select(     class,     angle_ch_1,     area_ch_1,     avg_inten_ch_1,     avg_inten_ch_2,     avg_inten_ch_3   )  cells_roc_auc_res <- score_roc_auc |>   fit(class ~ ., data = cells_subset) cells_roc_auc_res@results #> # A tibble: 5 × 4 #>   name    score outcome predictor      #>   <chr>   <dbl> <chr>   <chr>          #> 1 roc_auc 0.502 class   angle_ch_1     #> 2 roc_auc 0.591 class   area_ch_1      #> 3 roc_auc 0.760 class   avg_inten_ch_1 #> 4 roc_auc 0.777 class   avg_inten_ch_2 #> 5 roc_auc 0.513 class   avg_inten_ch_3  # ----------------------------------------------------------------------------  # ROC AUC where `Sale_Price` is the numeric predictor and the class predictors # are the outcomes/responses  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  ames_roc_auc_res <- score_roc_auc |>   fit(Sale_Price ~ ., data = ames_subset) ames_roc_auc_res@results #> # A tibble: 5 × 4 #>   name     score outcome    predictor    #>   <chr>    <dbl> <chr>      <chr>        #> 1 roc_auc  0.742 Sale_Price MS_SubClass  #> 2 roc_auc  0.853 Sale_Price MS_Zoning    #> 3 roc_auc NA     Sale_Price Lot_Frontage #> 4 roc_auc NA     Sale_Price Lot_Area     #> 5 roc_auc  0.807 Sale_Price Street       # TODO Add multiclass example"},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"two objects can used compute importance scores based chi-squared test Fisher's exact test.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"","code":"score_xtab_pval_chisq  score_xtab_pval_fisher"},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"object class filtro::class_score_xtab (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_xtab (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"S7 object. primary property interest results. data frame results populated fit() method columns: name: name score (e.g., pval_chisq). score: estimates predictor. outcome: name outcome column. predictor: names predictor inputs. data accessed using object@results (see examples ).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"objects used : predictors factors outcome factor. case, contingency table (via table()) created proper variable roles, cross tabulation p-value computed using either chi-squared test (via stats::chisq.test()) Fisher's exact test (via stats::fisher.test()). p-value returned transformed -log10(p_value) larger values associated important predictors. Missing values removed predictor/outcome combination scored. cases underlying computations fail, scoring proceeds silently, missing value given score.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"estimating-the-scores","dir":"Reference","previous_headings":"","what":"Estimating the scores","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"filtro, score_* objects define scoring method (e.g., data input requirements, package dependencies, etc). compute scores specific data set, fit() method used. main arguments functions : object score class object based (e.g., score_xtab_pval_chisq). formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame() data data frame containing relevant columns defined formula. ... arguments passed methods. case_weights quantitative vector case weights length number rows data. default NULL indicates case weights.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"","code":"# Binary factor example  library(titanic) library(dplyr)  titanic_subset <- titanic_train |>   mutate(across(c(Survived, Pclass, Sex, Embarked), as.factor)) |>   select(Survived, Pclass, Sex, Age, Fare, Embarked)  # Chi-squared test titanic_xtab_pval_chisq_res <- score_xtab_pval_chisq |>   fit(Survived ~ ., data = titanic_subset) titanic_xtab_pval_chisq_res@results #> # A tibble: 5 × 4 #>   name            score outcome  predictor #>   <chr>           <dbl> <chr>    <chr>     #> 1 xtab_pval_chisq 22.3  Survived Pclass    #> 2 xtab_pval_chisq 57.9  Survived Sex       #> 3 xtab_pval_chisq NA    Survived Age       #> 4 xtab_pval_chisq NA    Survived Fare      #> 5 xtab_pval_chisq  5.79 Survived Embarked   # Fisher's exact test titanic_xtab_pval_fisher_res <- score_xtab_pval_fisher |>   fit(Survived ~ ., data = titanic_subset) titanic_xtab_pval_fisher_res@results #> # A tibble: 5 × 4 #>   name             score outcome  predictor #>   <chr>            <dbl> <chr>    <chr>     #> 1 xtab_pval_fisher 22.5  Survived Pclass    #> 2 xtab_pval_fisher 59.2  Survived Sex       #> 3 xtab_pval_fisher NA    Survived Age       #> 4 xtab_pval_fisher NA    Survived Fare      #> 5 xtab_pval_fisher  5.99 Survived Embarked   # Chi-squared test where `class` is the multiclass outcome/response  hpc_subset <- modeldata::hpc_data |>   dplyr::select(     class,     protocol,     hour   )  hpc_xtab_pval_chisq_res <- score_xtab_pval_chisq |>     fit(class ~ ., data = hpc_subset) hpc_xtab_pval_chisq_res@results #> # A tibble: 2 × 4 #>   name             score outcome predictor #>   <chr>            <dbl> <chr>   <chr>     #> 1 xtab_pval_chisq  0.246 class   protocol  #> 2 xtab_pval_chisq NA     class   hour"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"Similar show_best_desirability_prop() can simultaneously optimize multiple scores using desirability functions. See show_best_score_num() singular scoring method.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"","code":"show_best_desirability_num(x, ..., num_terms = 5)"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"x tibble data frame returned fill_safe_values(). ... One desirability selectors configure optimization. num_terms integer value specifying number predictors consider.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"tibble num_terms number rows. showing results, metrics presented \"wide format\" (one column per metric) new columns corresponding desirability values (starts .d_).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"See show_best_desirability_prop() details.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"","code":"library(desirability2) library(dplyr)  # Remove outcome ames_scores_results <- ames_scores_results |>   dplyr::select(-outcome) ames_scores_results #> # A tibble: 5 × 5 #>   predictor    aov_pval cor_pearson    imp_rf infogain #>   <chr>           <dbl>       <dbl>     <dbl>    <dbl> #> 1 MS_SubClass    237.         1     0.0148     0.266   #> 2 MS_Zoning      130.         1     0.00997    0.113   #> 3 Lot_Frontage   Inf          0.165 0.00668    0.146   #> 4 Lot_Area       Inf          0.255 0.0137     0.140   #> 5 Street           5.75       1     0.0000455  0.00365  show_best_desirability_num(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1) ) #> # A tibble: 5 × 7 #>   predictor    aov_pval cor_pearson  imp_rf infogain .d_max_cor_pearson #>   <chr>           <dbl>       <dbl>   <dbl>    <dbl>              <dbl> #> 1 MS_SubClass    237.         1     1.48e-2  0.266                1     #> 2 MS_Zoning      130.         1     9.97e-3  0.113                1     #> 3 Street           5.75       1     4.55e-5  0.00365              1     #> 4 Lot_Area       Inf          0.255 1.37e-2  0.140                0.255 #> 5 Lot_Frontage   Inf          0.165 6.68e-3  0.146                0.165 #> # ℹ 1 more variable: .d_overall <dbl>  show_best_desirability_num(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf) ) #> # A tibble: 5 × 8 #>   predictor    aov_pval cor_pearson  imp_rf infogain .d_max_cor_pearson #>   <chr>           <dbl>       <dbl>   <dbl>    <dbl>              <dbl> #> 1 MS_SubClass    237.         1     1.48e-2  0.266                1     #> 2 MS_Zoning      130.         1     9.97e-3  0.113                1     #> 3 Lot_Area       Inf          0.255 1.37e-2  0.140                0.255 #> 4 Lot_Frontage   Inf          0.165 6.68e-3  0.146                0.165 #> 5 Street           5.75       1     4.55e-5  0.00365              1     #> # ℹ 2 more variables: .d_max_imp_rf <dbl>, .d_overall <dbl>  show_best_desirability_num(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf),   maximize(infogain) ) #> # A tibble: 5 × 9 #>   predictor    aov_pval cor_pearson  imp_rf infogain .d_max_cor_pearson #>   <chr>           <dbl>       <dbl>   <dbl>    <dbl>              <dbl> #> 1 MS_SubClass    237.         1     1.48e-2  0.266                1     #> 2 MS_Zoning      130.         1     9.97e-3  0.113                1     #> 3 Lot_Area       Inf          0.255 1.37e-2  0.140                0.255 #> 4 Lot_Frontage   Inf          0.165 6.68e-3  0.146                0.165 #> 5 Street           5.75       1     4.55e-5  0.00365              1     #> # ℹ 3 more variables: .d_max_imp_rf <dbl>, .d_max_infogain <dbl>, #> #   .d_overall <dbl>  show_best_desirability_num(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf),   maximize(infogain),   num_terms = 2 ) #> # A tibble: 2 × 9 #>   predictor   aov_pval cor_pearson  imp_rf infogain .d_max_cor_pearson #>   <chr>          <dbl>       <dbl>   <dbl>    <dbl>              <dbl> #> 1 MS_SubClass     237.           1 0.0148     0.266                  1 #> 2 MS_Zoning       130.           1 0.00997    0.113                  1 #> # ℹ 3 more variables: .d_max_imp_rf <dbl>, .d_max_infogain <dbl>, #> #   .d_overall <dbl>  show_best_desirability_num(   ames_scores_results,   target(cor_pearson, low = 0.2, target = 0.255, high = 0.9) ) #> # A tibble: 5 × 7 #>   predictor aov_pval cor_pearson  imp_rf infogain .d_target_cor_pearson #>   <chr>        <dbl>       <dbl>   <dbl>    <dbl>                 <dbl> #> 1 Lot_Area    Inf          0.255 1.37e-2  0.140                   1.000 #> 2 MS_SubCl…   237.         1     1.48e-2  0.266                   0     #> 3 MS_Zoning   130.         1     9.97e-3  0.113                   0     #> 4 Lot_Fron…   Inf          0.165 6.68e-3  0.146                   0     #> 5 Street        5.75       1     4.55e-5  0.00365                 0     #> # ℹ 1 more variable: .d_overall <dbl>  show_best_desirability_num(   ames_scores_results,   constrain(cor_pearson, low = 0.2, high = 1) ) #> # A tibble: 5 × 7 #>   predictor    aov_pval cor_pearson  imp_rf infogain .d_box_cor_pearson #>   <chr>           <dbl>       <dbl>   <dbl>    <dbl>              <dbl> #> 1 MS_SubClass    237.         1     1.48e-2  0.266                    1 #> 2 MS_Zoning      130.         1     9.97e-3  0.113                    1 #> 3 Lot_Area       Inf          0.255 1.37e-2  0.140                    1 #> 4 Street           5.75       1     4.55e-5  0.00365                  1 #> 5 Lot_Frontage   Inf          0.165 6.68e-3  0.146                    0 #> # ℹ 1 more variable: .d_overall <dbl>"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","title":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","text":"Analogous , adapted desirability2::show_best_desirability() can simultaneously optimize multiple scores using desirability functions. See show_best_score_prop() singular filtering method.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","text":"","code":"show_best_desirability_prop(x, ..., prop_terms = 1)"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","text":"x tibble data frame returned fill_safe_values(). ... One desirability selectors configure optimization. prop_terms numeric value specifying proportion predictors consider.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","text":"tibble prop_terms proportion rows. showing results, metrics presented \"wide format\" (one column per metric) new columns corresponding desirability values (starts .d_).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_prop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","text":"Desirability functions might help selecting best model based one performance metric. user creates desirability function map values metric [0, 1] range 1.0 desirable zero unacceptable. constructing metric interest, overall desirability computed using geometric mean individual desirabilities. verbs can used ... (arguments) : maximize() larger values better, area ROC score. minimize() metrics RMSE Brier score. target() cases specific value metric important. constrain() used range values equally desirable.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","text":"","code":"library(desirability2) library(dplyr)  # Remove outcome ames_scores_results <- ames_scores_results |>   dplyr::select(-outcome) ames_scores_results #> # A tibble: 5 × 5 #>   predictor    aov_pval cor_pearson    imp_rf infogain #>   <chr>           <dbl>       <dbl>     <dbl>    <dbl> #> 1 MS_SubClass    237.         1     0.0148     0.266   #> 2 MS_Zoning      130.         1     0.00997    0.113   #> 3 Lot_Frontage   Inf          0.165 0.00668    0.146   #> 4 Lot_Area       Inf          0.255 0.0137     0.140   #> 5 Street           5.75       1     0.0000455  0.00365  show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1) ) #> # A tibble: 5 × 7 #>   predictor    aov_pval cor_pearson  imp_rf infogain .d_max_cor_pearson #>   <chr>           <dbl>       <dbl>   <dbl>    <dbl>              <dbl> #> 1 MS_SubClass    237.         1     1.48e-2  0.266                1     #> 2 MS_Zoning      130.         1     9.97e-3  0.113                1     #> 3 Street           5.75       1     4.55e-5  0.00365              1     #> 4 Lot_Area       Inf          0.255 1.37e-2  0.140                0.255 #> 5 Lot_Frontage   Inf          0.165 6.68e-3  0.146                0.165 #> # ℹ 1 more variable: .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf) ) #> # A tibble: 5 × 8 #>   predictor    aov_pval cor_pearson  imp_rf infogain .d_max_cor_pearson #>   <chr>           <dbl>       <dbl>   <dbl>    <dbl>              <dbl> #> 1 MS_SubClass    237.         1     1.48e-2  0.266                1     #> 2 MS_Zoning      130.         1     9.97e-3  0.113                1     #> 3 Lot_Area       Inf          0.255 1.37e-2  0.140                0.255 #> 4 Lot_Frontage   Inf          0.165 6.68e-3  0.146                0.165 #> 5 Street           5.75       1     4.55e-5  0.00365              1     #> # ℹ 2 more variables: .d_max_imp_rf <dbl>, .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf),   maximize(infogain) ) #> # A tibble: 5 × 9 #>   predictor    aov_pval cor_pearson  imp_rf infogain .d_max_cor_pearson #>   <chr>           <dbl>       <dbl>   <dbl>    <dbl>              <dbl> #> 1 MS_SubClass    237.         1     1.48e-2  0.266                1     #> 2 MS_Zoning      130.         1     9.97e-3  0.113                1     #> 3 Lot_Area       Inf          0.255 1.37e-2  0.140                0.255 #> 4 Lot_Frontage   Inf          0.165 6.68e-3  0.146                0.165 #> 5 Street           5.75       1     4.55e-5  0.00365              1     #> # ℹ 3 more variables: .d_max_imp_rf <dbl>, .d_max_infogain <dbl>, #> #   .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   maximize(cor_pearson, low = 0, high = 1),   maximize(imp_rf),   maximize(infogain),   prop_terms = 0.2 ) #> # A tibble: 1 × 9 #>   predictor   aov_pval cor_pearson imp_rf infogain .d_max_cor_pearson #>   <chr>          <dbl>       <dbl>  <dbl>    <dbl>              <dbl> #> 1 MS_SubClass     237.           1 0.0148    0.266                  1 #> # ℹ 3 more variables: .d_max_imp_rf <dbl>, .d_max_infogain <dbl>, #> #   .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   target(cor_pearson, low = 0.2, target = 0.255, high = 0.9) ) #> # A tibble: 5 × 7 #>   predictor aov_pval cor_pearson  imp_rf infogain .d_target_cor_pearson #>   <chr>        <dbl>       <dbl>   <dbl>    <dbl>                 <dbl> #> 1 Lot_Area    Inf          0.255 1.37e-2  0.140                   1.000 #> 2 MS_SubCl…   237.         1     1.48e-2  0.266                   0     #> 3 MS_Zoning   130.         1     9.97e-3  0.113                   0     #> 4 Lot_Fron…   Inf          0.165 6.68e-3  0.146                   0     #> 5 Street        5.75       1     4.55e-5  0.00365                 0     #> # ℹ 1 more variable: .d_overall <dbl>  show_best_desirability_prop(   ames_scores_results,   constrain(cor_pearson, low = 0.2, high = 1) ) #> # A tibble: 5 × 7 #>   predictor    aov_pval cor_pearson  imp_rf infogain .d_box_cor_pearson #>   <chr>           <dbl>       <dbl>   <dbl>    <dbl>              <dbl> #> 1 MS_SubClass    237.         1     1.48e-2  0.266                    1 #> 2 MS_Zoning      130.         1     9.97e-3  0.113                    1 #> 3 Lot_Area       Inf          0.255 1.37e-2  0.140                    1 #> 4 Street           5.75       1     4.55e-5  0.00365                  1 #> 5 Lot_Frontage   Inf          0.165 6.68e-3  0.146                    0 #> # ℹ 1 more variable: .d_overall <dbl>"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_cutoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best score, based on based on cutoff value (singular) — show_best_score_cutoff","title":"Show best score, based on based on cutoff value (singular) — show_best_score_cutoff","text":"Show best score, based based cutoff value (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_cutoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best score, based on based on cutoff value (singular) — show_best_score_cutoff","text":"x score class object. ... arguments passed methods. cutoff numeric value specifying cutoff value. target numeric value specifying target value. default NULL indicates target value.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_cutoff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show best score, based on based on cutoff value (singular) — show_best_score_cutoff","text":"","code":"library(dplyr)  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street        ames_aov_pval_res |> show_best_score_cutoff(cutoff = 130) #> # A tibble: 1 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_dual.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best score, based on number or proportion of predictors with optional cutoff value (singular) — show_best_score_dual","title":"Show best score, based on number or proportion of predictors with optional cutoff value (singular) — show_best_score_dual","text":"Show best score, based number proportion predictors optional cutoff value (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_dual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best score, based on number or proportion of predictors with optional cutoff value (singular) — show_best_score_dual","text":"x score class object, .e., score_*. ... arguments passed methods. prop_terms numeric value specifying proportion predictors consider. num_terms integer value specifying number predictors consider. cutoff numeric value specifying cutoff value.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_dual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show best score, based on number or proportion of predictors with optional cutoff value (singular) — show_best_score_dual","text":"","code":"library(dplyr)  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street        ames_aov_pval_res |> show_best_score_dual(prop_terms = 0.5) #> # A tibble: 2 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass #> 2 aov_pval  130. Sale_Price MS_Zoning   ames_aov_pval_res |> show_best_score_dual(prop_terms = 0.5, cutoff = 130) #> # A tibble: 1 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass  ames_aov_pval_res |> show_best_score_dual(num_terms = 2) #> # A tibble: 2 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass #> 2 aov_pval  130. Sale_Price MS_Zoning   ames_aov_pval_res |> show_best_score_dual(prop_terms = 2, cutoff = 130) #> # A tibble: 1 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best score, based on number of predictors (singular) — show_best_score_num","title":"Show best score, based on number of predictors (singular) — show_best_score_num","text":"Show best score, based number predictors (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best score, based on number of predictors (singular) — show_best_score_num","text":"x score class object, .e., score_*. ... arguments passed methods. num_terms integer value specifying number predictors consider.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show best score, based on number of predictors (singular) — show_best_score_num","text":"","code":"library(dplyr)  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street        ames_aov_pval_res |> show_best_score_num(num_terms = 2) #> # A tibble: 2 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass #> 2 aov_pval  130. Sale_Price MS_Zoning"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best score, based on proportion of predictors (singular) — show_best_score_prop","title":"Show best score, based on proportion of predictors (singular) — show_best_score_prop","text":"Show best score, based proportion predictors (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best score, based on proportion of predictors (singular) — show_best_score_prop","text":"x score class object, .e., score_*. ... arguments passed methods. prop_terms numeric value specifying proportion predictors consider.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show best score, based on proportion of predictors (singular) — show_best_score_prop","text":"","code":"library(dplyr)  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street        ames_aov_pval_res |> show_best_score_prop(prop_terms = 0.2) #> # A tibble: 1 × 4 #>   name     score outcome    predictor   #>   <chr>    <dbl> <chr>      <chr>       #> 1 aov_pval  237. Sale_Price MS_SubClass"},{"path":[]},{"path":"https://filtro.tidymodels.org/dev/news/index.html","id":"filtro-010","dir":"Changelog","previous_headings":"","what":"filtro 0.1.0","title":"filtro 0.1.0","text":"CRAN release: 2025-07-18 Initial CRAN submission.","code":""}]
