---
title: "Introduction to filtro"
vignette: >
  %\VignetteIndexEntry{Introduction to filtro}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

> ⚠️ **work-in-progress**

This document demonstrates some basic uses of filtro. 

```{r, start, include = FALSE}
library(filtro)
library(desirability2)
library(dplyr)
library(modeldata)
```

```{r}
#| label: setup
library(filtro)
library(desirability2)
library(dplyr)
library(modeldata)
```

## A score class object

```{r}
score_aov_pval
```

Currently, the available score class objects include:

```{r eval = FALSE}
score_aov_pval
score_aov_fstat
score_cor_pearson
score_cor_spearman
score_imp_rf
score_imp_rf_conditional
score_imp_rf_oblique
score_info_gain
score_gain_ratio
score_sym_uncert
score_roc_auc
score_xtab_pval_chisq
score_xtab_pval_fisher
```

## A scoring example

The package contains a data set used to predict housing sale price. It has 73 predictor columns and a numeric variable `Sale_Price` (the outcome). Since the outcome are right-skewed, we will apply a log (base 10) transformation. 

```{r}
ames <- modeldata::ames
ames <- ames |>
  dplyr::mutate(Sale_Price = log10(Sale_Price))

# ames |> str() # uncomment to see the structure of the data
```

First, we create a score class object to define the scoring method, and then use the `fit()` method with the standard formula to compute the scores.

The data frame of results can be accessed via `object@results`. 

```{r}
ames_aov_pval_res <-
  score_aov_pval |>
  fit(Sale_Price ~ ., data = ames)
ames_aov_pval_res@results
```

Since the outcome is numeric, any predictor that is not a factor will result in `NA`. In case where `NA` is produced, a safe value (can be accessed via `object@fallback_value`) can be used to retain the predictor. 

By default, it computes `-log10(p_value)`, so that larger values indicate more important predictors. If users prefer raw p-values, a helper function `dont_log_pvalues()` is available. 

For this specific scoring method, i.e., `score_aov_*`, case weights are supported. 

## A filtering exmple for *singular* score

```{r}
# Show best score, based on proportion of predictors
ames_aov_pval_res |> show_best_score_prop(prop_terms = 0.2)
```

## A filtering example for *plural* scores

```{r}
# Pearson correlation
ames_cor_pearson_res <-
  score_cor_pearson |>
  fit(Sale_Price ~ ., data = ames)
ames_cor_pearson_res@results
```

```{r}
# Forest importance
set.seed(42)
ames_imp_rf_reg_res <-
  score_imp_rf |>
  fit(Sale_Price ~ ., data = ames)
ames_imp_rf_reg_res@results
```

```{r}
# Information gain
score_info_gain_reg <- score_info_gain
score_info_gain_reg@mode <- "regression"

ames_info_gain_reg_res <-
  score_info_gain_reg |>
  fit(Sale_Price ~ ., data = ames)
ames_info_gain_reg_res@results
```

```{r}
# Create a list
class_score_list <- list(
  ames_cor_pearson_res,
  ames_imp_rf_reg_res,
  ames_info_gain_reg_res
)
```

```{r}
# Fill safe values
ames_scores_results <- class_score_list |>
  fill_safe_values() |>
  # Remove outcome
  dplyr::select(-outcome)
ames_scores_results
```

```{r}
# Single and multi-parameter optimization using desirability functions
ames_scores_results |>
  show_best_desirability_prop(
    maximize(cor_pearson, low = 0, high = 1)
  )

ames_scores_results |>
  show_best_desirability_prop(
    maximize(cor_pearson, low = 0, high = 1),
    maximize(imp_rf)
  )

ames_scores_results |>
  show_best_desirability_prop(
    maximize(cor_pearson, low = 0, high = 1),
    maximize(imp_rf),
    maximize(infogain)
  )

ames_scores_results |>
  show_best_desirability_prop(
    maximize(cor_pearson, low = 0, high = 1),
    maximize(imp_rf),
    maximize(infogain),
    prop_terms = 0.2
  )

ames_scores_results |>
  show_best_desirability_prop(
    target(cor_pearson, low = 0.2, target = 0.255, high = 0.9)
  )

ames_scores_results |>
  show_best_desirability_prop(
    constrain(cor_pearson, low = 0.2, high = 1)
  )
```