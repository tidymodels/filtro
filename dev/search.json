[{"path":"https://filtro.tidymodels.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Posit Software PBC Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://filtro.tidymodels.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Frances Lin. Author, maintainer. Max Kuhn. Author. Emil Hvitfeldt. Author. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://filtro.tidymodels.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lin F, Kuhn M, Hvitfeldt E (2025). filtro: Feature Selection Using Supervised Filter-Based Methods. R package version 0.1.0.9000, https://github.com/tidymodels/filtro.","code":"@Manual{,   title = {filtro: Feature Selection Using Supervised Filter-Based Methods},   author = {Frances Lin and Max Kuhn and Emil Hvitfeldt},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://github.com/tidymodels/filtro}, }"},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"filtro","dir":"","previous_headings":"","what":"Feature Selection Using Supervised Filter-Based Methods","title":"Feature Selection Using Supervised Filter-Based Methods","text":"⚠️ filtro active development; breaking changes may occur.","code":""},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Feature Selection Using Supervised Filter-Based Methods","text":"filtro tidy tools apply filter-based supervised feature selection methods. methods score rank feature relevance using metrics p-values, correlation, importance scores, . package provides functions rank select top proportion number features using built-methods desirability2 package, supports streamlined preprocessing, either standalone within tidymodels workflows recipes package.","code":""},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Feature Selection Using Supervised Filter-Based Methods","text":"Install released version filtro CRAN : Install development version GitHub :","code":"install.packages(\"filtro\") # install.packages(\"pak\") pak::pak(\"tidymodels/filtro\")"},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"feature-selection-methods","dir":"","previous_headings":"","what":"Feature selection methods","title":"Feature Selection Using Supervised Filter-Based Methods","text":"Currently, implemented filters include: ANOVA F-test Correlation Cross tabulation (chi-squared test Fisher’s exact test) p-value Random forest feature importance score Information gain Area ROC curve","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://filtro.tidymodels.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Feature Selection Using Supervised Filter-Based Methods","text":"Please note filtro project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions tidymodels packages, modeling, machine learning, please post Posit Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/arrange_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange score — arrange_score","title":"Arrange score — arrange_score","text":"Arrange score","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/arrange_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange score — arrange_score","text":"","code":"arrange_score(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/arrange_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange score — arrange_score","text":"x score class object. ... NULL","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/bind_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind all class_score objects, including their associated metadata and scores — bind_scores","title":"Bind all class_score objects, including their associated metadata and scores — bind_scores","text":"Bind class_score objects, including associated metadata scores","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/bind_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind all class_score objects, including their associated metadata and scores — bind_scores","text":"","code":"bind_scores(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/bind_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind all class_score objects, including their associated metadata and scores — bind_scores","text":"x list. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/bind_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind all class_score objects, including their associated metadata and scores — bind_scores","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  # anova pval ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street        # pearson cor ames_cor_pearson_res <-   score_cor_pearson |>   fit(Sale_Price ~ ., data = ames_subset) ames_cor_pearson_res@results #> # A tibble: 5 × 4 #>   name         score outcome    predictor    #>   <chr>        <dbl> <chr>      <chr>        #> 1 cor_pearson NA     Sale_Price MS_SubClass  #> 2 cor_pearson NA     Sale_Price MS_Zoning    #> 3 cor_pearson  0.165 Sale_Price Lot_Frontage #> 4 cor_pearson  0.255 Sale_Price Lot_Area     #> 5 cor_pearson NA     Sale_Price Street        # forest imp score_imp_rf_reg <- score_imp_rf score_imp_rf_reg@mode <- \"regression\" set.seed(42) ames_imp_rf_reg_res <-   score_imp_rf_reg |>   fit(Sale_Price ~ ., data = ames_subset) ames_imp_rf_reg_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 imp_rf 0.0149    Sale_Price MS_SubClass  #> 2 imp_rf 0.0112    Sale_Price MS_Zoning    #> 3 imp_rf 0.00693   Sale_Price Lot_Frontage #> 4 imp_rf 0.0143    Sale_Price Lot_Area     #> 5 imp_rf 0.0000336 Sale_Price Street        # info gain score_info_gain_reg <- score_info_gain score_info_gain_reg@mode <- \"regression\"  ames_info_gain_reg_res <-   score_info_gain_reg |>   fit(Sale_Price ~ ., data = ames_subset) ames_info_gain_reg_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 infogain 0.266   Sale_Price MS_SubClass  #> 2 infogain 0.113   Sale_Price MS_Zoning    #> 3 infogain 0.146   Sale_Price Lot_Frontage #> 4 infogain 0.140   Sale_Price Lot_Area     #> 5 infogain 0.00365 Sale_Price Street        # Create a list class_score_list <- list(   ames_aov_pval_res,   ames_cor_pearson_res,   ames_imp_rf_reg_res,   ames_info_gain_reg_res )  # Bind scores class_score_list |> bind_scores() #> # A tibble: 5 × 6 #>   outcome    predictor    aov_pval cor_pearson    imp_rf infogain #>   <chr>      <chr>           <dbl>       <dbl>     <dbl>    <dbl> #> 1 Sale_Price MS_SubClass    237.        NA     0.0149     0.266   #> 2 Sale_Price MS_Zoning      130.        NA     0.0112     0.113   #> 3 Sale_Price Lot_Frontage    NA          0.165 0.00693    0.146   #> 4 Sale_Price Lot_Area        NA          0.255 0.0143     0.140   #> 5 Sale_Price Street           5.75      NA     0.0000336  0.00365"},{"path":"https://filtro.tidymodels.org/dev/reference/class_score.html","id":null,"dir":"Reference","previous_headings":"","what":"General S7 classes for scoring objects — class_score","title":"General S7 classes for scoring objects — class_score","text":"class_score S7 object contains slots characteristics predictor importance scores. specific classes individual methods based object (shown ).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/class_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General S7 classes for scoring objects — class_score","text":"","code":"class_score(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame() )  class_score_aov(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame(),   neg_log10 = TRUE )  class_score_cor(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame() )  class_score_xtab(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame(),   neg_log10 = TRUE,   fdr = FALSE )  class_score_imp_rf(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame(),   engine = \"ranger\",   trees = 100,   mtry = 2,   min_n = 1,   mode = \"classification\",   seed = 42 )  class_score_info_gain(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame(),   mode = \"classification\" )  class_score_roc_auc(   outcome_type = c(\"numeric\", \"factor\"),   predictor_type = c(\"numeric\", \"factor\"),   case_weights = logical(0),   range = integer(0),   inclusive = logical(0),   fallback_value = integer(0),   score_type = character(0),   sorts = function() NULL,   direction = character(0),   deterministic = logical(0),   tuning = logical(0),   calculating_fn = function() NULL,   label = character(0),   packages = character(0),   results = data.frame() )"},{"path":"https://filtro.tidymodels.org/dev/reference/class_score_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an S7 subclass of base R's list for Method Dispatch — class_score_list","title":"Construct an S7 subclass of base R's list for Method Dispatch — class_score_list","text":"class_score_list S7 subclass S3 base R's list, used method dispatch bind_scores() fill_safe_values().","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/class_score_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an S7 subclass of base R's list for Method Dispatch — class_score_list","text":"","code":"class_score_list"},{"path":"https://filtro.tidymodels.org/dev/reference/class_score_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Construct an S7 subclass of base R's list for Method Dispatch — class_score_list","text":"object class S7_S3_class length 3.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill safe value (singular) — fill_safe_value","title":"Fill safe value (singular) — fill_safe_value","text":"Fills safe value missing score. singular scoring method. See fill_safe_values() plural scoring method.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill safe value (singular) — fill_safe_value","text":"","code":"fill_safe_value(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill safe value (singular) — fill_safe_value","text":"x score class object. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill safe value (singular) — fill_safe_value","text":"","code":"library(dplyr)  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset)  # Fill safe value ames_aov_pval_res |>   filtro::fill_safe_value() #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval Inf    Sale_Price Lot_Frontage #> 4 aov_pval Inf    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street"},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill safe values (plural) — fill_safe_values","title":"Fill safe values (plural) — fill_safe_values","text":"Fills safe values missing scores, wrapped bind_scores(). plural scoring method. See fill_safe_value() singular scoring method.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill safe values (plural) — fill_safe_values","text":"","code":"fill_safe_values(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill safe values (plural) — fill_safe_values","text":"x list. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/fill_safe_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill safe values (plural) — fill_safe_values","text":"","code":"library(dplyr)  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  # anova pval ames_aov_pval_res <-   score_aov_pval |>   fit(Sale_Price ~ ., data = ames_subset) ames_aov_pval_res@results #> # A tibble: 5 × 4 #>   name      score outcome    predictor    #>   <chr>     <dbl> <chr>      <chr>        #> 1 aov_pval 237.   Sale_Price MS_SubClass  #> 2 aov_pval 130.   Sale_Price MS_Zoning    #> 3 aov_pval  NA    Sale_Price Lot_Frontage #> 4 aov_pval  NA    Sale_Price Lot_Area     #> 5 aov_pval   5.75 Sale_Price Street        # pearson cor ames_cor_pearson_res <-   score_cor_pearson |>   fit(Sale_Price ~ ., data = ames_subset) ames_cor_pearson_res@results #> # A tibble: 5 × 4 #>   name         score outcome    predictor    #>   <chr>        <dbl> <chr>      <chr>        #> 1 cor_pearson NA     Sale_Price MS_SubClass  #> 2 cor_pearson NA     Sale_Price MS_Zoning    #> 3 cor_pearson  0.165 Sale_Price Lot_Frontage #> 4 cor_pearson  0.255 Sale_Price Lot_Area     #> 5 cor_pearson NA     Sale_Price Street        # forest imp score_imp_rf_reg <- score_imp_rf score_imp_rf_reg@mode <- \"regression\" set.seed(42) ames_imp_rf_reg_res <-   score_imp_rf_reg |>   fit(Sale_Price ~ ., data = ames_subset) ames_imp_rf_reg_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 imp_rf 0.0149    Sale_Price MS_SubClass  #> 2 imp_rf 0.0112    Sale_Price MS_Zoning    #> 3 imp_rf 0.00693   Sale_Price Lot_Frontage #> 4 imp_rf 0.0143    Sale_Price Lot_Area     #> 5 imp_rf 0.0000336 Sale_Price Street        # info gain score_info_gain_reg <- score_info_gain score_info_gain_reg@mode <- \"regression\"  ames_info_gain_reg_res <-   score_info_gain_reg |>   fit(Sale_Price ~ ., data = ames_subset) ames_info_gain_reg_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 infogain 0.266   Sale_Price MS_SubClass  #> 2 infogain 0.113   Sale_Price MS_Zoning    #> 3 infogain 0.146   Sale_Price Lot_Frontage #> 4 infogain 0.140   Sale_Price Lot_Area     #> 5 infogain 0.00365 Sale_Price Street        # Create a list class_score_list <- list(   ames_aov_pval_res,   ames_cor_pearson_res,   ames_imp_rf_reg_res,   ames_info_gain_reg_res )  # Fill safe values class_score_list |> fill_safe_values() #> # A tibble: 5 × 6 #>   outcome    predictor    aov_pval cor_pearson    imp_rf infogain #>   <chr>      <chr>           <dbl>       <dbl>     <dbl>    <dbl> #> 1 Sale_Price MS_SubClass    237.         1     0.0149     0.266   #> 2 Sale_Price MS_Zoning      130.         1     0.0112     0.113   #> 3 Sale_Price Lot_Frontage   Inf          0.165 0.00693    0.146   #> 4 Sale_Price Lot_Area       Inf          0.255 0.0143     0.140   #> 5 Sale_Price Street           5.75       1     0.0000336  0.00365"},{"path":"https://filtro.tidymodels.org/dev/reference/filtro-package.html","id":null,"dir":"Reference","previous_headings":"","what":"filtro: Feature Selection Using Supervised Filter-Based Methods — filtro-package","title":"filtro: Feature Selection Using Supervised Filter-Based Methods — filtro-package","text":"Tidy tools apply filter-based supervised feature selection methods. methods score rank feature relevance using metrics p-values, correlation, importance scores (Kuhn Johnson (2019) doi:10.1201/9781315108230 ).","code":""},{"path":[]},{"path":"https://filtro.tidymodels.org/dev/reference/filtro-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"filtro: Feature Selection Using Supervised Filter-Based Methods — filtro-package","text":"Maintainer: Frances Lin franceslinyc@gmail.com Authors: Max Kuhn max@posit.co (ORCID) Emil Hvitfeldt emil.hvitfeldt@posit.co contributors: Posit Software, PBC (03wc8by49) [copyright holder, funder]","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_dense.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank score based on dplyr::dense_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_dense","title":"Rank score based on dplyr::dense_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_dense","text":"Rank score based dplyr::dense_rank(), tied values receive rank ranks gaps (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_dense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank score based on dplyr::dense_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_dense","text":"","code":"rank_best_score_dense(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_dense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank score based on dplyr::dense_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_dense","text":"x score class object. ... NULL","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank score based on dplyr::min_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_min","title":"Rank score based on dplyr::min_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_min","text":"Rank score based dplyr::min_rank(), tied values receive rank ranks gaps (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank score based on dplyr::min_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_min","text":"","code":"rank_best_score_min(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/rank_best_score_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank score based on dplyr::min_rank(), where tied values receive the same rank and ranks are with gaps (singular) — rank_best_score_min","text":"x score class object. ... NULL","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via analysis of variance hypothesis tests — score_aov_pval","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"objects used either: predictors numeric outcome factor/category, predictors factors outcome numeric. either case, linear model (via stats::lm()) created proper variable roles, overall p-value hypothesis means equal computed via standard F-statistic. p-value returned transformed -log10(p_value) larger values associated important predictors. score_aov_pval score_aov_fstat objects define technique. apply filter data, use fit() method: See Examples section .","code":"fit(score_aov_pval, formula, data)"},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"","code":"score_aov_pval  score_aov_fstat"},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"object class filtro::class_score_aov (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_aov (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"object score class object based class_score_aov. formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame(). data data frame containing relevant columns defined formula. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"function determine columns predictors outcomes linear model; user intervention required. Missing values removed predictor/outcome combination scored. cases lm() anova() fail, scoring proceeds silently, missing value given score.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_aov_pval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via analysis of variance hypothesis tests — score_aov_pval","text":"","code":"# Analysis of variance where `class` is the class predictor and the numeric # predictors are the outcomes/responses  cell_data <- modeldata::cells cell_data$case <- NULL  cell_p_val_res <-   score_aov_pval |>   fit(class ~ ., data = cell_data) cell_p_val_res@results #> # A tibble: 56 × 4 #>    name       score outcome predictor                    #>    <chr>      <dbl> <chr>   <chr>                        #>  1 aov_pval  0.0575 class   angle_ch_1                   #>  2 aov_pval  1.04   class   area_ch_1                    #>  3 aov_pval 73.2    class   avg_inten_ch_1               #>  4 aov_pval 88.5    class   avg_inten_ch_2               #>  5 aov_pval  0.0246 class   avg_inten_ch_3               #>  6 aov_pval 27.8    class   avg_inten_ch_4               #>  7 aov_pval 52.6    class   convex_hull_area_ratio_ch_1  #>  8 aov_pval 60.0    class   convex_hull_perim_ratio_ch_1 #>  9 aov_pval 50.7    class   diff_inten_density_ch_1      #> 10 aov_pval  1.51   class   diff_inten_density_ch_3      #> # ℹ 46 more rows  cell_t_stat_res <-   score_aov_fstat |>   fit(class ~ ., data = cell_data) cell_t_stat_res@results #> # A tibble: 56 × 4 #>    name          score outcome predictor                    #>    <chr>         <dbl> <chr>   <chr>                        #>  1 aov_fstat   0.0244  class   angle_ch_1                   #>  2 aov_fstat   2.87    class   area_ch_1                    #>  3 aov_fstat 360.      class   avg_inten_ch_1               #>  4 aov_fstat 444.      class   avg_inten_ch_2               #>  5 aov_fstat   0.00477 class   avg_inten_ch_3               #>  6 aov_fstat 127.      class   avg_inten_ch_4               #>  7 aov_fstat 251.      class   convex_hull_area_ratio_ch_1  #>  8 aov_fstat 289.      class   convex_hull_perim_ratio_ch_1 #>  9 aov_fstat 241.      class   diff_inten_density_ch_1      #> 10 aov_fstat   4.68    class   diff_inten_density_ch_3      #> # ℹ 46 more rows  # --------------------------------------------------------------------------- library(dplyr)  # Analysis of variance where `chem_fp_*` are the class predictors and # `permeability` is the numeric outcome/response  permeability <-   modeldata::permeability_qsar |>   # Make the problem a little smaller for time; use 50 predictors   select(1:51) |>   # Make the binary predictor columns into factors   mutate(across(starts_with(\"chem_fp\"), as.factor))  perm_p_val_res <-   score_aov_pval |>   fit(permeability ~ ., data = permeability) perm_p_val_res@results #> # A tibble: 50 × 4 #>    name      score outcome      predictor    #>    <chr>     <dbl> <chr>        <chr>        #>  1 aov_pval  1.88  permeability chem_fp_0001 #>  2 aov_pval  1.63  permeability chem_fp_0002 #>  3 aov_pval  1.36  permeability chem_fp_0003 #>  4 aov_pval  1.36  permeability chem_fp_0004 #>  5 aov_pval  1.36  permeability chem_fp_0005 #>  6 aov_pval 10.6   permeability chem_fp_0006 #>  7 aov_pval NA     permeability chem_fp_0007 #>  8 aov_pval NA     permeability chem_fp_0008 #>  9 aov_pval  0.265 permeability chem_fp_0009 #> 10 aov_pval  0.341 permeability chem_fp_0010 #> # ℹ 40 more rows  # Note that some `lm()` calls failed and are given NA score values. For # example: table(permeability$chem_fp_0007) #>  #>   1  #> 165   perm_t_stat_res <-   score_aov_fstat |>   fit(permeability ~ ., data = permeability) perm_t_stat_res@results #> # A tibble: 50 × 4 #>    name       score outcome      predictor    #>    <chr>      <dbl> <chr>        <chr>        #>  1 aov_fstat  6.28  permeability chem_fp_0001 #>  2 aov_fstat  5.22  permeability chem_fp_0002 #>  3 aov_fstat  4.13  permeability chem_fp_0003 #>  4 aov_fstat  4.13  permeability chem_fp_0004 #>  5 aov_fstat  4.13  permeability chem_fp_0005 #>  6 aov_fstat 51.3   permeability chem_fp_0006 #>  7 aov_fstat NA     permeability chem_fp_0007 #>  8 aov_fstat NA     permeability chem_fp_0008 #>  9 aov_fstat  0.371 permeability chem_fp_0009 #> 10 aov_fstat  0.559 permeability chem_fp_0010 #> # ℹ 40 more rows"},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via correlation coefficient — score_cor_pearson","title":"Scoring via correlation coefficient — score_cor_pearson","text":"objects used : predictors numeric outcome numeric. case, correlation coefficient (via stats::cor()) computed proper variable roles. Values closer 1 -1 (.e., abs(cor_pearson) closer 1) associated important predictors. score_cor_pearson score_cor_spearman objects define technique. apply filter data, use fit() method: See Examples section .","code":"fit(score_cor_pearson, formula, data)"},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via correlation coefficient — score_cor_pearson","text":"","code":"score_cor_pearson  score_cor_spearman"},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via correlation coefficient — score_cor_pearson","text":"object class filtro::class_score_cor (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_cor (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring via correlation coefficient — score_cor_pearson","text":"object score class object based class_score_cor. formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame(). data data frame containing relevant columns defined formula. case_weights quantitative vector case weights length number rows data. default NULL indicates case weights. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via correlation coefficient — score_cor_pearson","text":"function determine columns predictors outcomes compute correlations; user intervention required. Missing values removed predictor/outcome combination scored. cases cor() fail, scoring proceeds silently, missing value given score.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_cor_pearson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via correlation coefficient — score_cor_pearson","text":"","code":"library(dplyr)  ames_subset <- modeldata::ames |>   select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   )  ames_cor_pearson_res <-   score_cor_pearson |>   fit(Sale_Price ~ ., data = ames_subset) ames_cor_pearson_res@results #> # A tibble: 5 × 4 #>   name         score outcome    predictor    #>   <chr>        <dbl> <chr>      <chr>        #> 1 cor_pearson NA     Sale_Price MS_SubClass  #> 2 cor_pearson NA     Sale_Price MS_Zoning    #> 3 cor_pearson  0.202 Sale_Price Lot_Frontage #> 4 cor_pearson  0.267 Sale_Price Lot_Area     #> 5 cor_pearson NA     Sale_Price Street        ames_cor_spearman_res <-   score_cor_spearman |>   fit(Sale_Price ~ ., data = ames_subset) ames_cor_spearman_res@results #> # A tibble: 5 × 4 #>   name          score outcome    predictor    #>   <chr>         <dbl> <chr>      <chr>        #> 1 cor_spearman NA     Sale_Price MS_SubClass  #> 2 cor_spearman NA     Sale_Price MS_Zoning    #> 3 cor_spearman  0.228 Sale_Price Lot_Frontage #> 4 cor_spearman  0.429 Sale_Price Lot_Area     #> 5 cor_spearman NA     Sale_Price Street"},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via random forests — score_imp_rf","title":"Scoring via random forests — score_imp_rf","text":"objects used either: predictors numeric outcome factor/category, predictors factors outcome numeric. either case, random forest, conditional random forest, oblique random forest (via ranger::ranger(), partykit::cforest(), aorsf::orsf()) created proper variable roles, feature importance scores computed. Larger values associated important predictors. score_imp_rf, score_imp_rf_conditional score_imp_rf_oblique objects define technique. apply filter data, use fit() method: See Examples section .","code":"fit(score_imp_rf, formula, data)"},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via random forests — score_imp_rf","text":"","code":"score_imp_rf  score_imp_rf_conditional  score_imp_rf_oblique"},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via random forests — score_imp_rf","text":"object class filtro::class_score_imp_rf (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_imp_rf (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_imp_rf (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring via random forests — score_imp_rf","text":"object score class object based class_score_imp_rf. formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame(). data data frame containing relevant columns defined formula. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via random forests — score_imp_rf","text":"function determine columns predictors outcomes random forest; user intervention required. Missing values removed predictor/outcome combination scored. predictor's importance score 0, partykit::cforest() may omit name results. cases like , score 0 assigned missing predictors.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_imp_rf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via random forests — score_imp_rf","text":"","code":"library(dplyr)  # Random forests for classification task  cells_subset <- modeldata::cells |>   dplyr::select(     class,     angle_ch_1,     area_ch_1,     avg_inten_ch_1,     avg_inten_ch_2,     avg_inten_ch_3   )  # Random forest set.seed(42) cells_imp_rf_res <- score_imp_rf |>   fit(class ~ ., data = cells_subset) cells_imp_rf_res@results #> # A tibble: 5 × 4 #>   name       score outcome predictor      #>   <chr>      <dbl> <chr>   <chr>          #> 1 imp_rf 0.0000947 class   angle_ch_1     #> 2 imp_rf 0.0318    class   area_ch_1      #> 3 imp_rf 0.0672    class   avg_inten_ch_1 #> 4 imp_rf 0.0838    class   avg_inten_ch_2 #> 5 imp_rf 0.0104    class   avg_inten_ch_3  # Conditional random forest cells_imp_rf_conditional_res <- score_imp_rf_conditional |>   fit(class ~ ., data = cells_subset) cells_imp_rf_conditional_res@results #> # A tibble: 5 × 4 #>   name                 score outcome predictor      #>   <chr>                <dbl> <chr>   <chr>          #> 1 imp_rf_conditional 0.00332 class   angle_ch_1     #> 2 imp_rf_conditional 0.0519  class   area_ch_1      #> 3 imp_rf_conditional 0.0854  class   avg_inten_ch_1 #> 4 imp_rf_conditional 0.216   class   avg_inten_ch_2 #> 5 imp_rf_conditional 0.0169  class   avg_inten_ch_3  # Oblique random forest cells_imp_rf_oblique_res <- score_imp_rf_oblique |>   fit(class ~ ., data = cells_subset) cells_imp_rf_oblique_res@results #> # A tibble: 5 × 4 #>   name              score outcome predictor      #>   <chr>             <dbl> <chr>   <chr>          #> 1 imp_rf_oblique -0.00194 class   angle_ch_1     #> 2 imp_rf_oblique  0.0548  class   area_ch_1      #> 3 imp_rf_oblique  0.125   class   avg_inten_ch_1 #> 4 imp_rf_oblique  0.136   class   avg_inten_ch_2 #> 5 imp_rf_oblique  0.0147  class   avg_inten_ch_3  # ----------------------------------------------------------------------------  # Random forests for regression task  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  regression_task <- score_imp_rf regression_task@mode <- \"regression\"  set.seed(42) ames_imp_rf_regression_task_res <-   regression_task |>   fit(Sale_Price ~ ., data = ames_subset) ames_imp_rf_regression_task_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 imp_rf 0.0149    Sale_Price MS_SubClass  #> 2 imp_rf 0.0112    Sale_Price MS_Zoning    #> 3 imp_rf 0.00693   Sale_Price Lot_Frontage #> 4 imp_rf 0.0143    Sale_Price Lot_Area     #> 5 imp_rf 0.0000336 Sale_Price Street       # TODO Add example of how to change trees, mtry, min_n, seed"},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via entropy-based filters — score_info_gain","title":"Scoring via entropy-based filters — score_info_gain","text":"objects used either: predictors numeric outcome factor/category, predictors factors outcome numeric. either case, entropy-based filter (via FSelectorRcpp::information_gain()) applied proper variable roles. Depending chosen method, information gain, gain ratio, symmetrical uncertainty computed. Larger values associated important predictors. score_info_gain, score_gain_ratio score_sym_uncert objects define technique. apply filter data, use fit() method: See Examples section .","code":"fit(score_info_gain, formula, data)"},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via entropy-based filters — score_info_gain","text":"","code":"score_info_gain  score_gain_ratio  score_sym_uncert"},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via entropy-based filters — score_info_gain","text":"object class filtro::class_score_info_gain (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_info_gain (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_info_gain (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring via entropy-based filters — score_info_gain","text":"object score class object based score_info_gain. formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame(). data data frame containing relevant columns defined formula. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via entropy-based filters — score_info_gain","text":"function determine columns predictors outcomes filter; user intervention required. Missing values removed predictor/outcome combination scored. predictor's importance score 0, gain ratio method may omit name results. cases like , score 0 assigned missing predictors.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_info_gain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via entropy-based filters — score_info_gain","text":"","code":"rlang::is_installed(\"modeldata\") #> [1] TRUE  library(dplyr)  # Entropy-based filter for classification tasks  cells_subset <- modeldata::cells |>   dplyr::select(     class,     angle_ch_1,     area_ch_1,     avg_inten_ch_1,     avg_inten_ch_2,     avg_inten_ch_3   )  # Information gain cells_info_gain_res <- score_info_gain |>   fit(class ~ ., data = cells_subset) cells_info_gain_res@results #> # A tibble: 5 × 4 #>   name      score outcome predictor      #>   <chr>     <dbl> <chr>   <chr>          #> 1 infogain 0      class   angle_ch_1     #> 2 infogain 0.0144 class   area_ch_1      #> 3 infogain 0.109  class   avg_inten_ch_1 #> 4 infogain 0.137  class   avg_inten_ch_2 #> 5 infogain 0      class   avg_inten_ch_3  # Gain ratio cells_gain_ratio_res <- score_gain_ratio |>   fit(class ~ ., data = cells_subset) cells_gain_ratio_res@results #> # A tibble: 5 × 4 #>   name       score outcome predictor      #>   <chr>      <dbl> <chr>   <chr>          #> 1 gainratio 0      class   angle_ch_1     #> 2 gainratio 0.0266 class   area_ch_1      #> 3 gainratio 0.0828 class   avg_inten_ch_1 #> 4 gainratio 0.106  class   avg_inten_ch_2 #> 5 gainratio 0      class   avg_inten_ch_3  # Symmetrical uncertainty cells_sym_uncert_res <- score_sym_uncert |>   fit(class ~ ., data = cells_subset) cells_sym_uncert_res@results #> # A tibble: 5 × 4 #>   name       score outcome predictor      #>   <chr>      <dbl> <chr>   <chr>          #> 1 symuncert 0      class   angle_ch_1     #> 2 symuncert 0.0242 class   area_ch_1      #> 3 symuncert 0.111  class   avg_inten_ch_1 #> 4 symuncert 0.141  class   avg_inten_ch_2 #> 5 symuncert 0      class   avg_inten_ch_3  # ----------------------------------------------------------------------------  # Entropy-based filter for regression tasks  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  regression_task <- score_info_gain regression_task@mode <- \"regression\"  ames_info_gain_regression_task_res <-   regression_task |>   fit(Sale_Price ~ ., data = ames_subset) ames_info_gain_regression_task_res@results #> # A tibble: 5 × 4 #>   name       score outcome    predictor    #>   <chr>      <dbl> <chr>      <chr>        #> 1 infogain 0.266   Sale_Price MS_SubClass  #> 2 infogain 0.113   Sale_Price MS_Zoning    #> 3 infogain 0.146   Sale_Price Lot_Frontage #> 4 infogain 0.140   Sale_Price Lot_Area     #> 5 infogain 0.00365 Sale_Price Street"},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"objects used either: predictors numeric outcome factor/category, predictors factors outcome numeric. either case, ROC curve (via pROC::roc()) created proper variable roles, area ROC curve computed (via pROC::auc()). Values higher 0.5 (.e., max(roc_auc, 1 - roc_auc) > 0.5) associated important predictors. score_roc_auc object define technique. apply filter data, use fit() method: See Examples section .","code":"fit(score_roc_auc, formula, data)"},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"","code":"score_roc_auc"},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"object class filtro::class_score_roc_auc (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"object score class object based class_score_roc_auc. formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame(). data data frame containing relevant columns defined formula. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"function determine columns predictors outcomes ROC analysis; user intervention required. Missing values removed predictor/outcome combination scored. cases pROC::roc() fail, scoring proceeds silently, missing value given score.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_roc_auc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via area under the Receiver Operating Characteristic curve (ROC AUC) — score_roc_auc","text":"","code":"library(dplyr)  # ROC AUC where the numeric predictors are the predictors and # `class` is the class outcome/response  cells_subset <- modeldata::cells |>   dplyr::select(     class,     angle_ch_1,     area_ch_1,     avg_inten_ch_1,     avg_inten_ch_2,     avg_inten_ch_3   )  cells_roc_auc_res <- score_roc_auc |>   fit(class ~ ., data = cells_subset) cells_roc_auc_res@results #> # A tibble: 5 × 4 #>   name    score outcome predictor      #>   <chr>   <dbl> <chr>   <chr>          #> 1 roc_auc 0.502 class   angle_ch_1     #> 2 roc_auc 0.591 class   area_ch_1      #> 3 roc_auc 0.760 class   avg_inten_ch_1 #> 4 roc_auc 0.777 class   avg_inten_ch_2 #> 5 roc_auc 0.513 class   avg_inten_ch_3  # ----------------------------------------------------------------------------  # ROC AUC where `Sale_Price` is the numeric predictor and the class predictors # are the outcomes/responses  ames_subset <- modeldata::ames |>   dplyr::select(     Sale_Price,     MS_SubClass,     MS_Zoning,     Lot_Frontage,     Lot_Area,     Street   ) ames_subset <- ames_subset |>   dplyr::mutate(Sale_Price = log10(Sale_Price))  ames_roc_auc_res <- score_roc_auc |>   fit(Sale_Price ~ ., data = ames_subset) ames_roc_auc_res@results #> # A tibble: 5 × 4 #>   name     score outcome    predictor    #>   <chr>    <dbl> <chr>      <chr>        #> 1 roc_auc  0.742 Sale_Price MS_SubClass  #> 2 roc_auc  0.853 Sale_Price MS_Zoning    #> 3 roc_auc NA     Sale_Price Lot_Frontage #> 4 roc_auc NA     Sale_Price Lot_Area     #> 5 roc_auc  0.807 Sale_Price Street       # TODO Add multiclass example"},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"objects used : predictors factors outcome factor. case, contingency table (via table()) created proper variable roles, cross tabulation p-value computed using either chi-squared test (via stats::chisq.test()) Fisher's exact test (via stats::fisher.test()). p-value returned transformed -log10(p_value) larger values associated important predictors. score_xtab_pval_chisq score_xtab_pval_fisher objects define technique. apply filter data, use fit() method: See Examples section .","code":"fit(score_xtab_pval_chisq, formula, data)"},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"","code":"score_xtab_pval_chisq  score_xtab_pval_fisher"},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"object class filtro::class_score_xtab (inherits filtro::class_score, S7_object) length 1. object class filtro::class_score_xtab (inherits filtro::class_score, S7_object) length 1.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"object score class object based class_score_xtab. formula standard R formula single outcome right-hand side one predictors (.) left-hand side. data processed via stats::model.frame(). data data frame containing relevant columns defined formula. ... arguments passed methods.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"function determine columns predictors outcomes contingency table; user intervention required. Missing values removed predictor/outcome combination scored. cases stats::chisq.test() stats::fisher.test() fail, scoring proceeds silently, missing value given score.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/score_xtab_pval_chisq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring via the chi-squared test or Fisher's exact test — score_xtab_pval_chisq","text":"","code":"# Binary factor example  library(titanic) library(dplyr)  titanic_subset <- titanic_train |>   mutate(across(c(Survived, Pclass, Sex, Embarked), as.factor)) |>   select(Survived, Pclass, Sex, Age, Fare, Embarked)  titanic_xtab_pval_chisq_res <- score_xtab_pval_chisq |>   fit(Survived ~ ., data = titanic_subset) titanic_xtab_pval_chisq_res@results #> # A tibble: 5 × 4 #>   name            score outcome  predictor #>   <chr>           <dbl> <chr>    <chr>     #> 1 xtab_pval_chisq 22.3  Survived Pclass    #> 2 xtab_pval_chisq 57.9  Survived Sex       #> 3 xtab_pval_chisq NA    Survived Age       #> 4 xtab_pval_chisq NA    Survived Fare      #> 5 xtab_pval_chisq  5.79 Survived Embarked   titanic_xtab_pval_fisher_res <- score_xtab_pval_fisher |>   fit(Survived ~ ., data = titanic_subset) titanic_xtab_pval_fisher_res@results #> # A tibble: 5 × 4 #>   name             score outcome  predictor #>   <chr>            <dbl> <chr>    <chr>     #> 1 xtab_pval_fisher 22.5  Survived Pclass    #> 2 xtab_pval_fisher 59.2  Survived Sex       #> 3 xtab_pval_fisher NA    Survived Age       #> 4 xtab_pval_fisher NA    Survived Fare      #> 5 xtab_pval_fisher  5.99 Survived Embarked  # TODO Add multiclass example"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"Similar show_best_desirability_prop() can simultaneously optimize multiple scores using desirability functions. See show_best_score_num() singular scoring method.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"","code":"show_best_desirability_num(x, ..., num_terms = 5)"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"x tibble data frame returned fill_safe_values(). ... NULL num_terms numeric value specifying number predictors consider.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"Returns tibble num_terms number rows. showing results, metrics presented \"wide format\" (one column per metric) new columns corresponding desirability values (starts .d_).","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show best desirability scores, based on number of predictors (plural) — show_best_desirability_num","text":"See show_best_desirability_prop() details.","code":""},{"path":[]},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","title":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","text":"Analogous , adapted desirability2::show_best_desirability() can simultaneously optimize multiple scores using desirability functions. See show_best_score_prop() singular scoring method.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","text":"","code":"show_best_desirability_prop(x, ..., prop_terms = 0.99)"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","text":"x tibble data frame returned fill_safe_values(). ... NULL prop_terms numeric value specifying proportion predictors consider.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_desirability_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show best desirability scores, based on proportion of predictors (plural) — show_best_desirability_prop","text":"Returns tibble prop_terms proportion rows. showing results, metrics presented \"wide format\" (one column per metric) new columns corresponding desirability values (starts .d_).","code":""},{"path":[]},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_cutoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best score, based on based on cutoff value (singular) — show_best_score_cutoff","title":"Show best score, based on based on cutoff value (singular) — show_best_score_cutoff","text":"Show best score, based based cutoff value (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_cutoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show best score, based on based on cutoff value (singular) — show_best_score_cutoff","text":"","code":"show_best_score_cutoff(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_cutoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best score, based on based on cutoff value (singular) — show_best_score_cutoff","text":"x score class object. ... NULL","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_dual.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best score, based on number or proportion of predictors with optional cutoff value (singular) — show_best_score_dual","title":"Show best score, based on number or proportion of predictors with optional cutoff value (singular) — show_best_score_dual","text":"Show best score, based number proportion predictors optional cutoff value (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_dual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show best score, based on number or proportion of predictors with optional cutoff value (singular) — show_best_score_dual","text":"","code":"show_best_score_dual(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_dual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best score, based on number or proportion of predictors with optional cutoff value (singular) — show_best_score_dual","text":"x score class object. ... NULL","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best score, based on number of predictors (singular) — show_best_score_num","title":"Show best score, based on number of predictors (singular) — show_best_score_num","text":"Show best score, based number predictors (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show best score, based on number of predictors (singular) — show_best_score_num","text":"","code":"show_best_score_num(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best score, based on number of predictors (singular) — show_best_score_num","text":"x score class object. ... NULL","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Show best score, based on proportion of predictors (singular) — show_best_score_prop","title":"Show best score, based on proportion of predictors (singular) — show_best_score_prop","text":"Show best score, based proportion predictors (singular)","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show best score, based on proportion of predictors (singular) — show_best_score_prop","text":"","code":"show_best_score_prop(x, ...)"},{"path":"https://filtro.tidymodels.org/dev/reference/show_best_score_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show best score, based on proportion of predictors (singular) — show_best_score_prop","text":"x score class object. ... NULL prop_terms numeric value specifying proportion predictors consider.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/transform_abs.html","id":null,"dir":"Reference","previous_headings":"","what":"Absolute Transformation — transform_abs","title":"Absolute Transformation — transform_abs","text":"Absolute Transformation","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/transform_abs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Absolute Transformation — transform_abs","text":"","code":"transform_abs"},{"path":"https://filtro.tidymodels.org/dev/reference/transform_abs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Absolute Transformation — transform_abs","text":"object class transform length 9.","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/transform_neg_log10.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative log10 Transformation TODO Rewrite using other method — transform_neg_log10","title":"Negative log10 Transformation TODO Rewrite using other method — transform_neg_log10","text":"Negative log10 Transformation TODO Rewrite using method","code":""},{"path":"https://filtro.tidymodels.org/dev/reference/transform_neg_log10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative log10 Transformation TODO Rewrite using other method — transform_neg_log10","text":"","code":"transform_neg_log10"},{"path":"https://filtro.tidymodels.org/dev/reference/transform_neg_log10.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Negative log10 Transformation TODO Rewrite using other method — transform_neg_log10","text":"object class transform length 9.","code":""},{"path":[]},{"path":"https://filtro.tidymodels.org/dev/news/index.html","id":"filtro-010","dir":"Changelog","previous_headings":"","what":"filtro 0.1.0","title":"filtro 0.1.0","text":"CRAN release: 2025-07-18 Initial CRAN submission.","code":""}]
